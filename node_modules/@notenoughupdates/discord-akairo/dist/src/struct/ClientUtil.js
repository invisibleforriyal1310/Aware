"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveUsers = exports.resolveUser = exports.resolveRoles = exports.resolveRole = exports.resolvePermissionNumber = exports.resolveMembers = exports.resolveMember = exports.resolveGuilds = exports.resolveGuild = exports.resolveEmojis = exports.resolveEmoji = exports.resolveChannels = exports.resolveChannel = exports.permissionNames = exports.fetchMember = exports.embed = exports.compareStreaming = exports.collection = exports.checkUser = exports.checkRole = exports.checkMember = exports.checkGuild = exports.checkEmoji = exports.checkChannel = exports.attachment = void 0;
const discord_js_1 = require("discord.js");
function attachment(file, name, description) {
    return new discord_js_1.AttachmentBuilder(file, { name, description });
}
exports.attachment = attachment;
function checkChannel(text, channel, caseSensitive = false, wholeWord = false) {
    if (channel.id === text)
        return true;
    const reg = /<#(\d{17,19})>/;
    const match = text.match(reg);
    if (match && channel.id === match[1])
        return true;
    text = caseSensitive ? text : text.toLowerCase();
    const name = caseSensitive ? channel.name : channel.name.toLowerCase();
    if (!wholeWord) {
        return name.includes(text) || name.includes(text.replace(/^#/, ""));
    }
    return name === text || name === text.replace(/^#/, "");
}
exports.checkChannel = checkChannel;
function checkEmoji(text, emoji, caseSensitive = false, wholeWord = false) {
    if (emoji.id === text)
        return true;
    const reg = /<a?:[a-zA-Z0-9_]+:(\d{17,19})>/;
    const match = text.match(reg);
    if (match && emoji.id === match[1])
        return true;
    text = caseSensitive ? text : text.toLowerCase();
    const name = caseSensitive ? emoji.name : emoji.name?.toLowerCase();
    if (!wholeWord) {
        return Boolean(name?.includes(text) || name?.includes(text.replace(/:/, "")));
    }
    return name === text || name === text.replace(/:/, "");
}
exports.checkEmoji = checkEmoji;
function checkGuild(text, guild, caseSensitive = false, wholeWord = false) {
    if (guild.id === text)
        return true;
    text = caseSensitive ? text : text.toLowerCase();
    const name = caseSensitive ? guild.name : guild.name.toLowerCase();
    if (!wholeWord)
        return name.includes(text);
    return name === text;
}
exports.checkGuild = checkGuild;
function checkMember(text, member, caseSensitive = false, wholeWord = false) {
    if (member.id === text)
        return true;
    const reg = /<@!?(\d{17,19})>/;
    const match = text.match(reg);
    if (match && member.id === match[1])
        return true;
    text = caseSensitive ? text : text.toLowerCase();
    const username = caseSensitive ? member.user.username : member.user.username.toLowerCase();
    const displayName = caseSensitive ? member.displayName : member.displayName.toLowerCase();
    const discrim = member.user.discriminator;
    if (!wholeWord) {
        return (displayName.includes(text) ||
            username.includes(text) ||
            ((username.includes(text.split("#")[0]) || displayName.includes(text.split("#")[0])) &&
                discrim.includes(text.split("#")[1])));
    }
    return (displayName === text ||
        username === text ||
        ((username === text.split("#")[0] || displayName === text.split("#")[0]) && discrim === text.split("#")[1]));
}
exports.checkMember = checkMember;
function checkRole(text, role, caseSensitive = false, wholeWord = false) {
    if (role.id === text)
        return true;
    const reg = /<@&(\d{17,19})>/;
    const match = text.match(reg);
    if (match && role.id === match[1])
        return true;
    text = caseSensitive ? text : text.toLowerCase();
    const name = caseSensitive ? role.name : role.name.toLowerCase();
    if (!wholeWord) {
        return name.includes(text) || name.includes(text.replace(/^@/, ""));
    }
    return name === text || name === text.replace(/^@/, "");
}
exports.checkRole = checkRole;
function checkUser(text, user, caseSensitive = false, wholeWord = false) {
    if (user.id === text)
        return true;
    const reg = /<@!?(\d{17,19})>/;
    const match = text.match(reg);
    if (match && user.id === match[1])
        return true;
    text = caseSensitive ? text : text.toLowerCase();
    const username = caseSensitive ? user.username : user.username.toLowerCase();
    const discrim = user.discriminator;
    if (!wholeWord) {
        return username.includes(text) || (username.includes(text.split("#")[0]) && discrim.includes(text.split("#")[1]));
    }
    return username === text || (username === text.split("#")[0] && discrim === text.split("#")[1]);
}
exports.checkUser = checkUser;
function collection(iterable) {
    return new discord_js_1.Collection(iterable);
}
exports.collection = collection;
function compareStreaming(oldMember, newMember) {
    const s1 = oldMember.presence?.activities.find(c => c.type === discord_js_1.ActivityType.Streaming);
    const s2 = newMember.presence?.activities.find(c => c.type === discord_js_1.ActivityType.Streaming);
    if (s1 === s2)
        return 0;
    if (s1)
        return 1;
    if (s2)
        return 2;
    return 0;
}
exports.compareStreaming = compareStreaming;
function embed(data) {
    return new discord_js_1.EmbedBuilder(data);
}
exports.embed = embed;
async function fetchMember(guild, id, cache) {
    const user = await guild.client.users.fetch(id, { cache });
    return guild.members.fetch({ user, cache });
}
exports.fetchMember = fetchMember;
function permissionNames() {
    return Object.keys(discord_js_1.PermissionFlagsBits);
}
exports.permissionNames = permissionNames;
function resolveChannel(text, channels, caseSensitive = false, wholeWord = false) {
    return channels.get(text) ?? channels.find(channel => checkChannel(text, channel, caseSensitive, wholeWord)) ?? null;
}
exports.resolveChannel = resolveChannel;
function resolveChannels(text, channels, caseSensitive = false, wholeWord = false) {
    return channels.filter(channel => checkChannel(text, channel, caseSensitive, wholeWord));
}
exports.resolveChannels = resolveChannels;
function resolveEmoji(text, emojis, caseSensitive = false, wholeWord = false) {
    return emojis.get(text) ?? emojis.find(emoji => checkEmoji(text, emoji, caseSensitive, wholeWord)) ?? null;
}
exports.resolveEmoji = resolveEmoji;
function resolveEmojis(text, emojis, caseSensitive = false, wholeWord = false) {
    return emojis.filter(emoji => checkEmoji(text, emoji, caseSensitive, wholeWord));
}
exports.resolveEmojis = resolveEmojis;
function resolveGuild(text, guilds, caseSensitive = false, wholeWord = false) {
    return guilds.get(text) ?? guilds.find(guild => checkGuild(text, guild, caseSensitive, wholeWord)) ?? null;
}
exports.resolveGuild = resolveGuild;
function resolveGuilds(text, guilds, caseSensitive = false, wholeWord = false) {
    return guilds.filter(guild => checkGuild(text, guild, caseSensitive, wholeWord));
}
exports.resolveGuilds = resolveGuilds;
function resolveMember(text, members, caseSensitive = false, wholeWord = false) {
    return members.get(text) ?? members.find(member => checkMember(text, member, caseSensitive, wholeWord)) ?? null;
}
exports.resolveMember = resolveMember;
function resolveMembers(text, members, caseSensitive = false, wholeWord = false) {
    return members.filter(member => checkMember(text, member, caseSensitive, wholeWord));
}
exports.resolveMembers = resolveMembers;
function resolvePermissionNumber(number) {
    const resolved = [];
    for (const key of Object.keys(discord_js_1.PermissionFlagsBits)) {
        if (BigInt(number) & discord_js_1.PermissionFlagsBits[key])
            resolved.push(key);
    }
    return resolved;
}
exports.resolvePermissionNumber = resolvePermissionNumber;
function resolveRole(text, roles, caseSensitive = false, wholeWord = false) {
    return roles.get(text) ?? roles.find(role => checkRole(text, role, caseSensitive, wholeWord)) ?? null;
}
exports.resolveRole = resolveRole;
function resolveRoles(text, roles, caseSensitive = false, wholeWord = false) {
    return roles.filter(role => checkRole(text, role, caseSensitive, wholeWord));
}
exports.resolveRoles = resolveRoles;
function resolveUser(text, users, caseSensitive = false, wholeWord = false) {
    return users.get(text) ?? users.find(user => checkUser(text, user, caseSensitive, wholeWord)) ?? null;
}
exports.resolveUser = resolveUser;
function resolveUsers(text, users, caseSensitive = false, wholeWord = false) {
    return users.filter(user => checkUser(text, user, caseSensitive, wholeWord));
}
exports.resolveUsers = resolveUsers;
//# sourceMappingURL=ClientUtil.js.map