import type { Awaitable, Message } from "discord.js";
import type { InhibitorHandlerEvents } from "../../typings/events.js";
import type { AkairoMessage } from "../../util/AkairoMessage.js";
import type { AkairoClient } from "../AkairoClient.js";
import { AkairoHandler, type AkairoHandlerOptions } from "../AkairoHandler.js";
import type { Command } from "../commands/Command.js";
import { Inhibitor } from "./Inhibitor.js";
export declare class InhibitorHandler extends AkairoHandler<Inhibitor, InhibitorHandler> {
    constructor(client: AkairoClient, options: InhibitorHandlerOptions);
    test(type: "all" | "pre" | "post", message: Message | AkairoMessage, command?: Command): Promise<string | null | void>;
}
type Events = InhibitorHandlerEvents;
export interface InhibitorHandler extends AkairoHandler<Inhibitor, InhibitorHandler> {
    on<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
    once<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
}
export type InhibitorHandlerOptions = AkairoHandlerOptions<Inhibitor, InhibitorHandler>;
export {};
//# sourceMappingURL=InhibitorHandler.d.ts.map