/// <reference types="node" />
import { AttachmentBuilder, Collection, EmbedBuilder, type APIEmbed, type BufferResolvable, type EmbedData, type Emoji, type Guild, type GuildBasedChannel, type GuildMember, type PermissionsString, type Role, type Snowflake, type User } from "discord.js";
import type { Stream } from "node:stream";
export declare function attachment(file: BufferResolvable | Stream, name?: string, description?: string): AttachmentBuilder;
export declare function checkChannel<C extends GuildBasedChannel>(text: string, channel: C, caseSensitive?: boolean, wholeWord?: boolean): boolean;
export declare function checkEmoji(text: string, emoji: Emoji, caseSensitive?: boolean, wholeWord?: boolean): boolean;
export declare function checkGuild(text: string, guild: Guild, caseSensitive?: boolean, wholeWord?: boolean): boolean;
export declare function checkMember(text: string, member: GuildMember, caseSensitive?: boolean, wholeWord?: boolean): boolean;
export declare function checkRole(text: string, role: Role, caseSensitive?: boolean, wholeWord?: boolean): boolean;
export declare function checkUser(text: string, user: User, caseSensitive?: boolean, wholeWord?: boolean): boolean;
export declare function collection<K, V>(iterable?: ReadonlyArray<readonly [K, V]> | null): Collection<K, V>;
export declare function compareStreaming(oldMember: GuildMember, newMember: GuildMember): 0 | 1 | 2;
export declare function embed(data?: EmbedData | APIEmbed): EmbedBuilder;
export declare function fetchMember(guild: Guild, id: Snowflake, cache: boolean): Promise<GuildMember>;
export declare function permissionNames(): PermissionsString[];
export declare function resolveChannel<C extends GuildBasedChannel>(text: string, channels: Collection<Snowflake, C>, caseSensitive?: boolean, wholeWord?: boolean): C | null;
export declare function resolveChannels<C extends GuildBasedChannel>(text: string, channels: Collection<Snowflake, C>, caseSensitive?: boolean, wholeWord?: boolean): Collection<Snowflake, C>;
export declare function resolveEmoji(text: string, emojis: Collection<Snowflake, Emoji>, caseSensitive?: boolean, wholeWord?: boolean): Emoji | null;
export declare function resolveEmojis(text: string, emojis: Collection<Snowflake, Emoji>, caseSensitive?: boolean, wholeWord?: boolean): Collection<Snowflake, Emoji>;
export declare function resolveGuild(text: string, guilds: Collection<Snowflake, Guild>, caseSensitive?: boolean, wholeWord?: boolean): Guild | null;
export declare function resolveGuilds(text: string, guilds: Collection<Snowflake, Guild>, caseSensitive?: boolean, wholeWord?: boolean): Collection<Snowflake, Guild>;
export declare function resolveMember(text: string, members: Collection<Snowflake, GuildMember>, caseSensitive?: boolean, wholeWord?: boolean): GuildMember | null;
export declare function resolveMembers(text: string, members: Collection<Snowflake, GuildMember>, caseSensitive?: boolean, wholeWord?: boolean): Collection<Snowflake, GuildMember>;
export declare function resolvePermissionNumber(number: number): string[];
export declare function resolveRole(text: string, roles: Collection<Snowflake, Role>, caseSensitive?: boolean, wholeWord?: boolean): Role | null;
export declare function resolveRoles(text: string, roles: Collection<Snowflake, Role>, caseSensitive?: boolean, wholeWord?: boolean): Collection<Snowflake, Role>;
export declare function resolveUser(text: Snowflake | string, users: Collection<Snowflake, User>, caseSensitive?: boolean, wholeWord?: boolean): User | null;
export declare function resolveUsers(text: string, users: Collection<Snowflake, User>, caseSensitive?: boolean, wholeWord?: boolean): Collection<Snowflake, User>;
//# sourceMappingURL=ClientUtil.d.ts.map