import { z } from "zod";
import type { ArgumentOptions } from "./arguments/Argument.js";
export type ParserOptions = {
    separated: boolean;
};
export declare const ParserOptions: z.ZodObject<{
    separated: z.ZodBoolean;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    separated: z.ZodBoolean;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    separated: z.ZodBoolean;
}, z.ZodTypeAny, "passthrough">>;
export declare class ContentParser {
    flagWords: string[];
    optionFlagWords: string[];
    quoted: boolean;
    separator?: string;
    constructor(options?: ContentParserOptions);
    parse(content: string): ContentParserResult;
    static getFlags(args: ArgumentOptions[]): ExtractedFlags;
}
export type ContentParserOptions = {
    flagWords?: string[];
    optionFlagWords?: string[];
    quoted?: boolean;
    separator?: string;
};
export declare const ContentParserOptions: z.ZodObject<{
    flagWords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    optionFlagWords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    quoted: z.ZodOptional<z.ZodBoolean>;
    separator: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    flagWords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    optionFlagWords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    quoted: z.ZodOptional<z.ZodBoolean>;
    separator: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    flagWords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    optionFlagWords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    quoted: z.ZodOptional<z.ZodBoolean>;
    separator: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>;
type BaseParsed = {
    type: "Phrase" | "Flag" | "OptionFlag";
    raw: string;
};
declare const BaseParsed: z.ZodObject<{
    raw: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    raw: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    raw: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
type ParsedPhrase = BaseParsed & {
    type: "Phrase";
    value: string;
};
declare const ParsedPhrase: z.ZodObject<{
    raw: z.ZodString;
    type: z.ZodLiteral<"Phrase">;
    value: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    raw: z.ZodString;
    type: z.ZodLiteral<"Phrase">;
    value: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    raw: z.ZodString;
    type: z.ZodLiteral<"Phrase">;
    value: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
type ParsedFlag = BaseParsed & {
    type: "Flag";
    key: string;
};
declare const ParsedFlag: z.ZodObject<{
    raw: z.ZodString;
    type: z.ZodLiteral<"Flag">;
    key: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    raw: z.ZodString;
    type: z.ZodLiteral<"Flag">;
    key: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    raw: z.ZodString;
    type: z.ZodLiteral<"Flag">;
    key: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
type ParsedOptionFlag = BaseParsed & {
    type: "OptionFlag";
    key: string;
    value: string;
};
declare const ParsedOptionFlag: z.ZodObject<{
    raw: z.ZodString;
    type: z.ZodLiteral<"OptionFlag">;
    key: z.ZodString;
    value: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    raw: z.ZodString;
    type: z.ZodLiteral<"OptionFlag">;
    key: z.ZodString;
    value: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    raw: z.ZodString;
    type: z.ZodLiteral<"OptionFlag">;
    key: z.ZodString;
    value: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
export type ExtractedFlags = {
    flagWords: string[];
    optionFlagWords: string[];
};
export declare const ExtractedFlags: z.ZodObject<{
    flagWords: z.ZodArray<z.ZodString, "many">;
    optionFlagWords: z.ZodArray<z.ZodString, "many">;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    flagWords: z.ZodArray<z.ZodString, "many">;
    optionFlagWords: z.ZodArray<z.ZodString, "many">;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    flagWords: z.ZodArray<z.ZodString, "many">;
    optionFlagWords: z.ZodArray<z.ZodString, "many">;
}, z.ZodTypeAny, "passthrough">>;
export type ContentParserResult = {
    all: (ParsedPhrase | ParsedFlag | ParsedOptionFlag)[];
    phrases: ParsedPhrase[];
    flags: ParsedFlag[];
    optionFlags: ParsedOptionFlag[];
};
export declare const ContentParserResult: z.ZodObject<{
    all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    phrases: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    flags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    optionFlags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    phrases: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    flags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    optionFlags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    phrases: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    flags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    optionFlags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, z.ZodTypeAny, "passthrough">>;
export {};
//# sourceMappingURL=ContentParser.d.ts.map