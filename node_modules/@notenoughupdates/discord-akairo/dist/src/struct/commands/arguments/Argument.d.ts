/// <reference types="node" />
import { type CategoryChannel, type Collection, type DirectoryChannel, type Emoji, type ForumChannel, type Guild, type GuildBasedChannel, type GuildChannel, type GuildEmoji, type GuildMember, type Invite, type Message, type NewsChannel, type Role, type Snowflake, type StageChannel, type TextBasedChannel, type TextChannel, type ThreadChannel, type User, type VoiceBasedChannel, type VoiceChannel } from "discord.js";
import type { URL } from "node:url";
import { z } from "zod";
import { MessageSendResolvable, SyncOrAsync } from "../../../typings/Util.js";
import { ArgumentMatches } from "../../../util/Constants.js";
import type { AkairoClient } from "../../AkairoClient.js";
import type { ContextMenuCommand } from "../../contextMenuCommands/ContextMenuCommand.js";
import type { Inhibitor } from "../../inhibitors/Inhibitor.js";
import type { Listener } from "../../listeners/Listener.js";
import type { Task } from "../../tasks/Task.js";
import type { Command } from "../Command.js";
import type { CommandHandler } from "../CommandHandler.js";
import { Flag, FlagType } from "../Flag.js";
import type { TypeResolver } from "./TypeResolver.js";
type ATC<R = unknown> = ArgumentTypeCaster<R>;
type KBAT = keyof BaseArgumentType;
type ATCR<R> = ArgumentTypeCasterReturn<R>;
type AT = ArgumentType;
type BAT = BaseArgumentType;
type ATCATCR<T extends ArgumentTypeCaster> = ArgumentTypeCaster<ArgumentTypeCasterReturn<T>>;
type ATCBAT<T extends keyof BaseArgumentType> = ArgumentTypeCaster<BaseArgumentType[T]>;
export declare class Argument {
    command: Command;
    default: DefaultValueSupplier | any;
    description: string | any;
    flag: string | string[] | null;
    index: number | null;
    limit: number;
    match: ArgumentMatch;
    modifyOtherwise: OtherwiseContentModifier | null;
    multipleFlags: boolean;
    otherwise: MessageSendResolvable | OtherwiseContentSupplier | null;
    prompt: ArgumentPromptOptions | boolean | null;
    type: ArgumentType | OmitThisParameter<ArgumentTypeCaster>;
    unordered: boolean | number | number[];
    constructor(command: Command, options?: ArgumentOptions);
    get client(): AkairoClient;
    get handler(): CommandHandler;
    cast(message: Message, phrase: string): Promise<any>;
    collect(message: Message, commandInput?: string, parsedInput?: any): Promise<Flag | any>;
    process(message: Message, phrase: string): Promise<Flag | any>;
    static cast<T extends ATC>(type: T, resolver: TypeResolver, message: Message, phrase: string): Promise<ATCR<T>>;
    static cast<T extends KBAT>(type: T, resolver: TypeResolver, message: Message, phrase: string): Promise<BAT[T]>;
    static cast(type: AT | ATC, resolver: TypeResolver, message: Message, phrase: string): Promise<any>;
    static compose<T extends ATC>(...types: T[]): ATCATCR<T>;
    static compose<T extends KBAT>(...types: T[]): ATCBAT<T>;
    static compose(...types: (AT | ATC)[]): ATC;
    static composeWithFailure<T extends ATC>(...types: T[]): ATCATCR<T>;
    static composeWithFailure<T extends KBAT>(...types: T[]): ATCBAT<T>;
    static composeWithFailure(...types: (AT | ATC)[]): ATC;
    static isFailure(value: unknown): value is null | undefined | Flag<FlagType.Fail>;
    static product<T extends ATC>(...types: T[]): ATCATCR<T>;
    static product<T extends KBAT>(...types: T[]): ATCBAT<T>;
    static product(...types: (AT | ATC)[]): ATC;
    static range<T extends ATC>(type: T, min: number, max: number, inclusive?: boolean): ATCATCR<T>;
    static range<T extends KBAT>(type: T, min: number, max: number, inclusive?: boolean): ATCBAT<T>;
    static range(type: AT | ATC, min: number, max: number, inclusive?: boolean): ATC;
    static tagged<T extends ATC>(type: T, tag?: any): ATCATCR<T>;
    static tagged<T extends KBAT>(type: T, tag?: any): ATCBAT<T>;
    static tagged(type: AT | ATC, tag?: any): ATC;
    static taggedUnion<T extends ATC>(...types: T[]): ATCATCR<T>;
    static taggedUnion<T extends KBAT>(...types: T[]): ATCBAT<T>;
    static taggedUnion(...types: (AT | ATC)[]): ATC;
    static taggedWithInput<T extends ATC>(type: T, tag?: any): ATCATCR<T>;
    static taggedWithInput<T extends KBAT>(type: T, tag?: any): ATCBAT<T>;
    static taggedWithInput(type: AT | ATC, tag?: any): ATC;
    static union<T extends ATC>(...types: T[]): ATCATCR<T>;
    static union<T extends KBAT>(...types: T[]): ATCBAT<T>;
    static union(...types: (AT | ATC)[]): ATC;
    static validate<T extends ATC>(type: T, predicate: ParsedValuePredicate): ATCATCR<T>;
    static validate<T extends KBAT>(type: T, predicate: ParsedValuePredicate): ATCBAT<T>;
    static validate(type: AT | ATC, predicate: ParsedValuePredicate): ATC;
    static withInput<T extends ATC>(type: T): ATC<ATCR<T>>;
    static withInput<T extends KBAT>(type: T): ATCBAT<T>;
    static withInput(type: AT | ATC): ATC;
}
export type ArgumentPromptData = {
    retries: number;
    infinite: boolean;
    message: Message;
    phrase: string;
    failure: null | Flag<FlagType.Fail>;
};
export declare const ArgumentPromptData: z.ZodObject<{
    retries: z.ZodNumber;
    infinite: z.ZodBoolean;
    message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
    phrase: z.ZodString;
    failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
}, "strip", z.ZodTypeAny, {
    message: Message<boolean>;
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
    retries: number;
    infinite: boolean;
}, {
    message: Message<boolean>;
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
    retries: number;
    infinite: boolean;
}>;
export type PromptContentSupplier = (message: Message, data: ArgumentPromptData) => SyncOrAsync<MessageSendResolvable>;
export declare const PromptContentSupplier: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
    retries: z.ZodNumber;
    infinite: z.ZodBoolean;
    message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
    phrase: z.ZodString;
    failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
}, "strip", z.ZodTypeAny, {
    message: Message<boolean>;
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
    retries: number;
    infinite: boolean;
}, {
    message: Message<boolean>;
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
    retries: number;
    infinite: boolean;
}>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>;
export type ArgumentPromptResponse = MessageSendResolvable | PromptContentSupplier;
export declare const ArgumentPromptResponse: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
    retries: z.ZodNumber;
    infinite: z.ZodBoolean;
    message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
    phrase: z.ZodString;
    failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
}, "strip", z.ZodTypeAny, {
    message: Message<boolean>;
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
    retries: number;
    infinite: boolean;
}, {
    message: Message<boolean>;
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
    retries: number;
    infinite: boolean;
}>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>;
export type FailureData = {
    phrase: string;
    failure: null | Flag<FlagType.Fail>;
};
export declare const FailureData: z.ZodObject<{
    phrase: z.ZodString;
    failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
}, "strip", z.ZodTypeAny, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}>;
export type OtherwiseContentSupplier = (message: Message, data: FailureData) => SyncOrAsync<MessageSendResolvable>;
export declare const OtherwiseContentSupplier: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
    phrase: z.ZodString;
    failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
}, "strip", z.ZodTypeAny, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>;
export type PromptContentModifier = (this: Argument, message: Message, text: MessageSendResolvable | OtherwiseContentSupplier, data: ArgumentPromptData) => SyncOrAsync<MessageSendResolvable>;
export declare const PromptContentModifier: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
    phrase: z.ZodString;
    failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
}, "strip", z.ZodTypeAny, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>;
export type ArgumentPromptOptions = {
    breakout?: boolean;
    cancel?: ArgumentPromptResponse;
    cancelWord?: string;
    ended?: ArgumentPromptResponse;
    infinite?: boolean;
    limit?: number;
    modifyCancel?: PromptContentModifier;
    modifyEnded?: PromptContentModifier;
    modifyRetry?: PromptContentModifier;
    modifyStart?: PromptContentModifier;
    modifyTimeout?: PromptContentModifier;
    optional?: boolean;
    retries?: number;
    retry?: ArgumentPromptResponse;
    start?: ArgumentPromptResponse;
    stopWord?: string;
    time?: number;
    timeout?: ArgumentPromptResponse;
};
export declare const ArgumentPromptOptions: z.ZodObject<{
    breakout: z.ZodOptional<z.ZodBoolean>;
    cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        retries: z.ZodNumber;
        infinite: z.ZodBoolean;
        message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
    cancelWord: z.ZodOptional<z.ZodString>;
    ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        retries: z.ZodNumber;
        infinite: z.ZodBoolean;
        message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
    infinite: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodOptional<z.ZodNumber>;
    modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
    modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
    modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
    modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
    modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
    optional: z.ZodOptional<z.ZodBoolean>;
    retries: z.ZodOptional<z.ZodNumber>;
    retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        retries: z.ZodNumber;
        infinite: z.ZodBoolean;
        message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
    start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        retries: z.ZodNumber;
        infinite: z.ZodBoolean;
        message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
    stopWord: z.ZodOptional<z.ZodString>;
    time: z.ZodOptional<z.ZodNumber>;
    timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        retries: z.ZodNumber;
        infinite: z.ZodBoolean;
        message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
}, "strip", z.ZodTypeAny, {
    breakout?: boolean | undefined;
    cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    cancelWord?: string | undefined;
    ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    infinite?: boolean | undefined;
    limit?: number | undefined;
    modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    optional?: boolean | undefined;
    retries?: number | undefined;
    retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    stopWord?: string | undefined;
    time?: number | undefined;
    timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
}, {
    breakout?: boolean | undefined;
    cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    cancelWord?: string | undefined;
    ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    infinite?: boolean | undefined;
    limit?: number | undefined;
    modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    optional?: boolean | undefined;
    retries?: number | undefined;
    retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    stopWord?: string | undefined;
    time?: number | undefined;
    timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        message: Message<boolean>;
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
        retries: number;
        infinite: boolean;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
}>;
export type ArgumentMatch = "phrase" | "flag" | "option" | "rest" | "separate" | "text" | "content" | "restContent" | "none";
export declare const ArgumentMatch: z.ZodEnum<["phrase", "flag", "option", "rest", "separate", "text", "content", "restContent", "none"]>;
export interface BaseArgumentType {
    string: string | null;
    lowercase: string | null;
    uppercase: string | null;
    charCodes: number[] | null;
    number: number | null;
    integer: number | null;
    bigint: bigint | null;
    emojint: number | null;
    url: URL | null;
    date: Date | null;
    color: number | null;
    user: User | null;
    users: Collection<Snowflake, User> | null;
    member: GuildMember | null;
    members: Collection<Snowflake, GuildMember> | null;
    relevant: User | GuildMember | null;
    relevants: Collection<Snowflake, User> | Collection<Snowflake, GuildMember> | null;
    channel: GuildBasedChannel | null;
    channels: Collection<Snowflake, GuildBasedChannel> | null;
    textChannel: TextChannel | null;
    textChannels: Collection<Snowflake, TextChannel> | null;
    voiceChannel: VoiceChannel | null;
    voiceChannels: Collection<Snowflake, VoiceChannel> | null;
    categoryChannel: CategoryChannel | null;
    categoryChannels: Collection<Snowflake, CategoryChannel> | null;
    newsChannel: NewsChannel | null;
    newsChannels: Collection<Snowflake, NewsChannel> | null;
    stageChannel: StageChannel | null;
    stageChannels: Collection<Snowflake, StageChannel> | null;
    threadChannel: ThreadChannel | null;
    threadChannels: Collection<Snowflake, ThreadChannel> | null;
    directoryChannel: DirectoryChannel | null;
    directoryChannels: Collection<Snowflake, DirectoryChannel> | null;
    forumChannel: ForumChannel | null;
    forumChannels: Collection<Snowflake, ForumChannel> | null;
    textBasedChannel: TextBasedChannel | null;
    textBasedChannels: Collection<Snowflake, TextBasedChannel> | null;
    voiceBasedChannel: VoiceBasedChannel | null;
    voiceBasedChannels: Collection<Snowflake, VoiceBasedChannel> | null;
    role: Role | null;
    roles: Collection<Snowflake, Role> | null;
    emoji: Emoji | null;
    emojis: Collection<Snowflake, Emoji> | null;
    guild: Guild | null;
    guilds: Collection<Snowflake, Guild> | null;
    message: Message | null;
    guildMessage: Message | null;
    relevantMessage: Message | null;
    invite: Invite | null;
    userMention: User | null;
    memberMention: GuildMember | null;
    channelMention: ThreadChannel | GuildChannel | null;
    roleMention: Role | null;
    emojiMention: GuildEmoji | null;
    commandAlias: Command | null;
    command: Command | null;
    inhibitor: Inhibitor | null;
    listener: Listener | null;
    task: Task | null;
    contextMenuCommand: ContextMenuCommand | null;
}
export type ArgumentType = keyof BaseArgumentType | (string | string[])[] | RegExp | string;
export declare const ArgumentType: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, "many">, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>;
export type ArgumentTypeCaster<R = unknown> = (this: Argument, message: Message, phrase: string) => R;
export declare const ArgumentTypeCaster: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodString], z.ZodUnknown>, z.ZodAny>;
export type ArgumentTypeCasterReturn<R> = R extends ArgumentTypeCaster<infer S> ? S : R;
export type OtherwiseContentModifier = (this: Argument, message: Message, text: MessageSendResolvable | OtherwiseContentSupplier, data: FailureData) => SyncOrAsync<MessageSendResolvable>;
export declare const OtherwiseContentModifier: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
    phrase: z.ZodString;
    failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
}, "strip", z.ZodTypeAny, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>;
export type BaseArgumentOptions = {
    otherwise?: MessageSendResolvable | OtherwiseContentSupplier;
    modifyOtherwise?: OtherwiseContentModifier;
};
export declare const BaseArgumentOptions: z.ZodObject<{
    otherwise: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
    modifyOtherwise: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
}, "strip", z.ZodTypeAny, {
    otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
}, {
    otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
}>;
export type DefaultArgumentOptions = BaseArgumentOptions & {
    prompt?: ArgumentPromptOptions;
};
export declare const DefaultArgumentOptions: z.ZodObject<{
    modifyOtherwise: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
    otherwise: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
    prompt: z.ZodOptional<z.ZodObject<{
        breakout: z.ZodOptional<z.ZodBoolean>;
        cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        cancelWord: z.ZodOptional<z.ZodString>;
        ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        infinite: z.ZodOptional<z.ZodBoolean>;
        limit: z.ZodOptional<z.ZodNumber>;
        modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        optional: z.ZodOptional<z.ZodBoolean>;
        retries: z.ZodOptional<z.ZodNumber>;
        retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        stopWord: z.ZodOptional<z.ZodString>;
        time: z.ZodOptional<z.ZodNumber>;
        timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
    }, "strip", z.ZodTypeAny, {
        breakout?: boolean | undefined;
        cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        cancelWord?: string | undefined;
        ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        infinite?: boolean | undefined;
        limit?: number | undefined;
        modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        optional?: boolean | undefined;
        retries?: number | undefined;
        retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        stopWord?: string | undefined;
        time?: number | undefined;
        timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    }, {
        breakout?: boolean | undefined;
        cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        cancelWord?: string | undefined;
        ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        infinite?: boolean | undefined;
        limit?: number | undefined;
        modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        optional?: boolean | undefined;
        retries?: number | undefined;
        retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        stopWord?: string | undefined;
        time?: number | undefined;
        timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    prompt?: {
        breakout?: boolean | undefined;
        cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        cancelWord?: string | undefined;
        ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        infinite?: boolean | undefined;
        limit?: number | undefined;
        modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        optional?: boolean | undefined;
        retries?: number | undefined;
        retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        stopWord?: string | undefined;
        time?: number | undefined;
        timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    } | undefined;
}, {
    modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    prompt?: {
        breakout?: boolean | undefined;
        cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        cancelWord?: string | undefined;
        ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        infinite?: boolean | undefined;
        limit?: number | undefined;
        modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        optional?: boolean | undefined;
        retries?: number | undefined;
        retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        stopWord?: string | undefined;
        time?: number | undefined;
        timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    } | undefined;
}>;
export interface ArgumentDefaults extends BaseArgumentOptions {
    prompt: ArgumentPromptOptions & Required<Pick<ArgumentPromptOptions, "breakout" | "cancelWord" | "infinite" | "limit" | "optional" | "retries" | "stopWord" | "time">>;
}
export type DefaultValueSupplier = (message: Message, data: FailureData) => any;
export declare const DefaultValueSupplier: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
    phrase: z.ZodString;
    failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
}, "strip", z.ZodTypeAny, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}, {
    failure: Flag<FlagType.Fail> | null;
    phrase: string;
}>], z.ZodUnknown>, z.ZodAny>;
export type ParsedValuePredicate = (message: Message, phrase: string, value: any) => boolean;
export declare const ParsedValuePredicate: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodString, z.ZodAny], z.ZodUnknown>, z.ZodBoolean>;
export type ArgumentOptions = {
    default?: DefaultValueSupplier | any;
    description?: string | any | any[];
    flag?: string | string[] | null;
    id?: string | null;
    index?: number | null;
    limit?: number;
    match?: ArgumentMatch;
    modifyOtherwise?: OtherwiseContentModifier | null;
    multipleFlags?: boolean;
    otherwise?: MessageSendResolvable | OtherwiseContentSupplier | null;
    prompt?: ArgumentPromptOptions | boolean | null;
    type?: ArgumentType | ArgumentTypeCaster;
    unordered?: boolean | number | number[];
};
export declare const ArgumentOptions: z.ZodObject<{
    default: z.ZodAny;
    description: z.ZodAny;
    flag: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
    id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    index: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    limit: z.ZodOptional<z.ZodNumber>;
    match: z.ZodOptional<z.ZodNativeEnum<typeof ArgumentMatches>>;
    modifyOtherwise: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>>>;
    multipleFlags: z.ZodOptional<z.ZodBoolean>;
    otherwise: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        phrase: z.ZodString;
        failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
    }, "strip", z.ZodTypeAny, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>>;
    prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
        breakout: z.ZodOptional<z.ZodBoolean>;
        cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        cancelWord: z.ZodOptional<z.ZodString>;
        ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        infinite: z.ZodOptional<z.ZodBoolean>;
        limit: z.ZodOptional<z.ZodNumber>;
        modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        optional: z.ZodOptional<z.ZodBoolean>;
        retries: z.ZodOptional<z.ZodNumber>;
        retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        stopWord: z.ZodOptional<z.ZodString>;
        time: z.ZodOptional<z.ZodNumber>;
        timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            retries: z.ZodNumber;
            infinite: z.ZodBoolean;
            message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
    }, "strip", z.ZodTypeAny, {
        breakout?: boolean | undefined;
        cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        cancelWord?: string | undefined;
        ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        infinite?: boolean | undefined;
        limit?: number | undefined;
        modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        optional?: boolean | undefined;
        retries?: number | undefined;
        retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        stopWord?: string | undefined;
        time?: number | undefined;
        timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    }, {
        breakout?: boolean | undefined;
        cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        cancelWord?: string | undefined;
        ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        infinite?: boolean | undefined;
        limit?: number | undefined;
        modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        optional?: boolean | undefined;
        retries?: number | undefined;
        retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        stopWord?: string | undefined;
        time?: number | undefined;
        timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    }>, z.ZodBoolean]>>>;
    type: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, "many">, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodString], z.ZodUnknown>, z.ZodAny>]>>;
    unordered: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>;
}, "strip", z.ZodTypeAny, {
    default?: any;
    description?: any;
    flag?: string | string[] | null | undefined;
    id?: string | null | undefined;
    index?: number | null | undefined;
    limit?: number | undefined;
    match?: ArgumentMatches | undefined;
    modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
    multipleFlags?: boolean | undefined;
    otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
    prompt?: boolean | {
        breakout?: boolean | undefined;
        cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        cancelWord?: string | undefined;
        ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        infinite?: boolean | undefined;
        limit?: number | undefined;
        modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        optional?: boolean | undefined;
        retries?: number | undefined;
        retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        stopWord?: string | undefined;
        time?: number | undefined;
        timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    } | null | undefined;
    type?: string | RegExp | (string | string[])[] | ((args_0: Message<boolean>, args_1: string, ...args_2: unknown[]) => any) | undefined;
    unordered?: number | boolean | number[] | undefined;
}, {
    default?: any;
    description?: any;
    flag?: string | string[] | null | undefined;
    id?: string | null | undefined;
    index?: number | null | undefined;
    limit?: number | undefined;
    match?: ArgumentMatches | undefined;
    modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
    multipleFlags?: boolean | undefined;
    otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
        failure: Flag<FlagType.Fail> | null;
        phrase: string;
    }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
    prompt?: boolean | {
        breakout?: boolean | undefined;
        cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        cancelWord?: string | undefined;
        ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        infinite?: boolean | undefined;
        limit?: number | undefined;
        modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        optional?: boolean | undefined;
        retries?: number | undefined;
        retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        stopWord?: string | undefined;
        time?: number | undefined;
        timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            message: Message<boolean>;
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
            retries: number;
            infinite: boolean;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
    } | null | undefined;
    type?: string | RegExp | (string | string[])[] | ((args_0: Message<boolean>, args_1: string, ...args_2: unknown[]) => any) | undefined;
    unordered?: number | boolean | number[] | undefined;
}>;
export {};
//# sourceMappingURL=Argument.d.ts.map