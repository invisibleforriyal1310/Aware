import { Collection } from "discord.js";
import type { AkairoClient } from "../../AkairoClient.js";
import type { ContextMenuCommandHandler } from "../../contextMenuCommands/ContextMenuCommandHandler.js";
import type { InhibitorHandler } from "../../inhibitors/InhibitorHandler.js";
import type { ListenerHandler } from "../../listeners/ListenerHandler.js";
import type { TaskHandler } from "../../tasks/TaskHandler.js";
import type { CommandHandler } from "../CommandHandler.js";
import type { ArgumentTypeCaster, BaseArgumentType } from "./Argument.js";
export declare class TypeResolver {
    client: AkairoClient;
    commandHandler: CommandHandler;
    inhibitorHandler?: InhibitorHandler | null;
    listenerHandler?: ListenerHandler | null;
    taskHandler: TaskHandler | null;
    contextMenuCommandHandler: ContextMenuCommandHandler | null;
    types: Collection<keyof BaseArgumentType | string, ArgumentTypeCaster>;
    constructor(handler: CommandHandler);
    private singleChannelBuiltInType;
    private multipleChannelBuiltInType;
    addBuiltInTypes(): void;
    type<T extends keyof BaseArgumentType>(name: T): OmitThisParameter<ArgumentTypeCaster<BaseArgumentType[T]>>;
    type(name: string): OmitThisParameter<ArgumentTypeCaster> | undefined;
    addType(name: string, fn: ArgumentTypeCaster<any>): TypeResolver;
    addTypes(types: Record<string, ArgumentTypeCaster<any>>): TypeResolver;
}
//# sourceMappingURL=TypeResolver.d.ts.map