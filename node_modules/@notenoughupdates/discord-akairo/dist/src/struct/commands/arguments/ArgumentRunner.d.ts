import type { Message } from "discord.js";
import { z } from "zod";
import type { ArgumentGenerator, ArgumentGeneratorReturn, Command } from "../Command.js";
import type { ContentParserResult } from "../ContentParser.js";
import { Flag, FlagType } from "../Flag.js";
import { Argument } from "./Argument.js";
export declare class ArgumentRunner {
    command: Command;
    constructor(command: Command);
    get client(): import("../../AkairoClient.js").AkairoClient<boolean>;
    get handler(): import("../CommandHandler.js").CommandHandler;
    run(message: Message, parsed: ContentParserResult, generator: ArgumentGenerator): Promise<Flag | {
        [args: string]: unknown;
    }>;
    runOne(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    runPhrase(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    runRest(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    runSeparate(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    runFlag(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag> | any;
    runOption(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    runText(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    runContent(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    runRestContent(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    runNone(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState, arg: Argument): Promise<Flag | any>;
    static increaseIndex(parsed: ContentParserResult, state: ArgumentRunnerState, n?: number): void;
    static isShortCircuit(value: unknown): value is Flag<FlagType.Cancel> | Flag<FlagType.Retry> | Flag<FlagType.Continue>;
    static fromArguments(args: [id: string, argument: Argument][]): () => ArgumentGeneratorReturn;
}
export type ArgumentRunnerState = {
    index: number;
    phraseIndex: number;
    usedIndices: Set<number>;
};
export declare const ArgumentRunnerState: z.ZodObject<{
    index: z.ZodNumber;
    phraseIndex: z.ZodNumber;
    usedIndices: z.ZodSet<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    index: number;
    phraseIndex: number;
    usedIndices: Set<number>;
}, {
    index: number;
    phraseIndex: number;
    usedIndices: Set<number>;
}>;
//# sourceMappingURL=ArgumentRunner.d.ts.map