/// <reference types="node" />
import { Collection, DiscordAPIError, type ApplicationCommandData, type AutocompleteInteraction, type Awaitable, type ChatInputCommandInteraction, type Guild, type Message, type Snowflake, type TextBasedChannel, type User } from "discord.js";
import { z } from "zod";
import type { CommandHandlerEvents as CommandHandlerEventsType } from "../../typings/events.js";
import { ArrayOrNot, SyncOrAsync } from "../../typings/Util.js";
import { AkairoMessage } from "../../util/AkairoMessage.js";
import { AkairoClient } from "../AkairoClient.js";
import { AkairoHandler, AkairoHandlerOptions } from "../AkairoHandler.js";
import { ContextMenuCommandHandler } from "../contextMenuCommands/ContextMenuCommandHandler.js";
import type { InhibitorHandler } from "../inhibitors/InhibitorHandler.js";
import type { ListenerHandler } from "../listeners/ListenerHandler.js";
import type { TaskHandler } from "../tasks/TaskHandler.js";
import { ArgumentDefaults, DefaultArgumentOptions } from "./arguments/Argument.js";
import { TypeResolver } from "./arguments/TypeResolver.js";
import { Command } from "./Command.js";
import { CommandUtil } from "./CommandUtil.js";
import { Flag, FlagType } from "./Flag.js";
export declare class CommandHandler extends AkairoHandler<Command, CommandHandler> {
    aliases: Collection<string, string>;
    aliasReplacement?: RegExp;
    allowMention: boolean | MentionPrefixPredicate;
    argumentDefaults: ArgumentDefaults;
    autoDefer: boolean;
    autoRegisterSlashCommands: boolean;
    blockBots: boolean;
    blockClient: boolean;
    commandUtil: boolean;
    commandUtilLifetime: number;
    commandUtils: Collection<string, CommandUtil<Message | AkairoMessage>>;
    commandUtilSweepInterval: number;
    cooldowns: Collection<string, {
        [id: string]: CooldownData;
    }>;
    defaultCooldown: number;
    execSlash: boolean;
    fetchMembers: boolean;
    handleEdits: boolean;
    ignoreCooldown: Snowflake | Snowflake[] | OmitThisParameter<IgnoreCheckPredicate>;
    ignorePermissions: Snowflake | Snowflake[] | OmitThisParameter<IgnoreCheckPredicate>;
    inhibitorHandler: InhibitorHandler | null;
    prefix: string | string[] | PrefixSupplier;
    prefixes: Collection<string | PrefixSupplier, Set<string>>;
    prompts: Collection<string, Set<string>>;
    resolver: TypeResolver;
    storeMessages: boolean;
    typing: boolean;
    skipBuiltInPostInhibitors: boolean;
    constructor(client: AkairoClient, options: CommandHandlerOptions);
    protected setup(): void;
    protected registerInteractionCommands(): Promise<void>;
    private mapInteraction;
    private sortInteraction;
    register(command: Command, filepath?: string): void;
    deregister(command: Command): void;
    handle(message: Message): Promise<boolean | null>;
    handleSlash(interaction: ChatInputCommandInteraction): Promise<boolean | null>;
    handleAutocomplete(interaction: AutocompleteInteraction): void;
    handleDirectCommand(message: Message, content: string, command: Command, ignore?: boolean): Promise<boolean | null>;
    handleRegexAndConditionalCommands(message: Message): Promise<boolean>;
    handleRegexCommands(message: Message): Promise<boolean>;
    handleConditionalCommands(message: Message): Promise<boolean>;
    runAllTypeInhibitors(message: Message | AkairoMessage, slash?: boolean): Promise<boolean>;
    runPreTypeInhibitors(message: Message | AkairoMessage): Promise<boolean>;
    runPostTypeInhibitors(message: Message | AkairoMessage, command: Command, slash?: boolean): Promise<boolean>;
    runPermissionChecks(message: Message | AkairoMessage, command: Command, slash?: boolean): Promise<boolean>;
    runCooldowns(message: Message | AkairoMessage, command: Command): boolean;
    runCommand(message: Message, command: Command, args: any): Promise<void>;
    parseCommand(message: Message | AkairoMessage): Promise<ParsedComponentData>;
    parseCommandOverwrittenPrefixes(message: Message | AkairoMessage): Promise<ParsedComponentData>;
    parseMultiplePrefixes(message: Message | AkairoMessage, pairs: [string, Set<string> | null][]): ParsedComponentData;
    parseWithPrefix(message: Message | AkairoMessage, prefix: string, associatedCommands?: Set<string> | null): ParsedComponentData;
    emitError(err: Error, message: Message | AkairoMessage, command?: Command): void;
    sweepCommandUtil(lifetime?: number): number;
    addPrompt(channel: TextBasedChannel, user: User): void;
    removePrompt(channel: TextBasedChannel, user: User): void;
    hasPrompt(channel: TextBasedChannel, user: User): boolean;
    findCommand(name: string): Command;
    useInhibitorHandler(inhibitorHandler: InhibitorHandler): CommandHandler;
    useListenerHandler(listenerHandler: ListenerHandler): CommandHandler;
    useTaskHandler(taskHandler: TaskHandler): CommandHandler;
    useContextMenuCommandHandler(contextMenuCommandHandler: ContextMenuCommandHandler): CommandHandler;
}
type Events = CommandHandlerEventsType;
export interface CommandHandler extends AkairoHandler<Command, CommandHandler> {
    on<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
    once<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
}
export declare class RegisterInteractionCommandError extends Error {
    original: DiscordAPIError;
    type: "guild" | "global";
    data: ApplicationCommandData[];
    guild: Guild | null;
    constructor(original: DiscordAPIError, type: "guild" | "global", data: ApplicationCommandData[], guild?: Guild | null);
}
export type MentionPrefixPredicate = (message: Message) => SyncOrAsync<boolean>;
export declare const MentionPrefixPredicate: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodBoolean, z.ZodPromise<z.ZodBoolean>]>>;
export type IgnoreCheckPredicate = (this: Command | CommandHandler, message: Message | AkairoMessage, command: Command) => boolean;
export declare const IgnoreCheckPredicate: z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>;
export type PrefixSupplier = (this: Command | CommandHandler, message: Message) => SyncOrAsync<ArrayOrNot<string>>;
export declare const PrefixSupplier: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>;
export type CommandHandlerOptions = AkairoHandlerOptions<Command, CommandHandler> & {
    aliasReplacement?: RegExp;
    allowMention?: boolean | MentionPrefixPredicate;
    argumentDefaults?: DefaultArgumentOptions;
    autoDefer?: boolean;
    autoRegisterSlashCommands?: boolean;
    blockBots?: boolean;
    blockClient?: boolean;
    commandUtil?: boolean;
    commandUtilLifetime?: number;
    commandUtilSweepInterval?: number;
    defaultCooldown?: number;
    fetchMembers?: boolean;
    handleEdits?: boolean;
    ignoreCooldown?: ArrayOrNot<Snowflake> | IgnoreCheckPredicate;
    ignorePermissions?: ArrayOrNot<Snowflake> | IgnoreCheckPredicate;
    prefix?: ArrayOrNot<string> | PrefixSupplier;
    storeMessages?: boolean;
    typing?: boolean;
    execSlash?: boolean;
    skipBuiltInPostInhibitors?: boolean;
};
export declare const CommandHandlerOptions: z.ZodObject<{
    directory: z.ZodString;
    classToHandle: z.ZodAny;
    extensions: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodSet<z.ZodString>]>>;
    automateCategories: z.ZodOptional<z.ZodBoolean>;
    loadFilter: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>>;
    aliasReplacement: z.ZodOptional<z.ZodType<RegExp, z.ZodTypeDef, RegExp>>;
    allowMention: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodBoolean, z.ZodPromise<z.ZodBoolean>]>>]>>;
    argumentDefaults: z.ZodOptional<z.ZodObject<{
        modifyOtherwise: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        otherwise: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        prompt: z.ZodOptional<z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }>>;
    autoDefer: z.ZodOptional<z.ZodBoolean>;
    autoRegisterSlashCommands: z.ZodOptional<z.ZodBoolean>;
    blockBots: z.ZodOptional<z.ZodBoolean>;
    blockClient: z.ZodOptional<z.ZodBoolean>;
    commandUtil: z.ZodOptional<z.ZodBoolean>;
    commandUtilLifetime: z.ZodOptional<z.ZodNumber>;
    commandUtilSweepInterval: z.ZodOptional<z.ZodNumber>;
    defaultCooldown: z.ZodOptional<z.ZodNumber>;
    fetchMembers: z.ZodOptional<z.ZodBoolean>;
    handleEdits: z.ZodOptional<z.ZodBoolean>;
    ignoreCooldown: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    ignorePermissions: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    prefix: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>>;
    storeMessages: z.ZodOptional<z.ZodBoolean>;
    typing: z.ZodOptional<z.ZodBoolean>;
    execSlash: z.ZodOptional<z.ZodBoolean>;
    skipBuiltInPostInhibitors: z.ZodOptional<z.ZodBoolean>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    directory: z.ZodString;
    classToHandle: z.ZodAny;
    extensions: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodSet<z.ZodString>]>>;
    automateCategories: z.ZodOptional<z.ZodBoolean>;
    loadFilter: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>>;
    aliasReplacement: z.ZodOptional<z.ZodType<RegExp, z.ZodTypeDef, RegExp>>;
    allowMention: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodBoolean, z.ZodPromise<z.ZodBoolean>]>>]>>;
    argumentDefaults: z.ZodOptional<z.ZodObject<{
        modifyOtherwise: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        otherwise: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        prompt: z.ZodOptional<z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }>>;
    autoDefer: z.ZodOptional<z.ZodBoolean>;
    autoRegisterSlashCommands: z.ZodOptional<z.ZodBoolean>;
    blockBots: z.ZodOptional<z.ZodBoolean>;
    blockClient: z.ZodOptional<z.ZodBoolean>;
    commandUtil: z.ZodOptional<z.ZodBoolean>;
    commandUtilLifetime: z.ZodOptional<z.ZodNumber>;
    commandUtilSweepInterval: z.ZodOptional<z.ZodNumber>;
    defaultCooldown: z.ZodOptional<z.ZodNumber>;
    fetchMembers: z.ZodOptional<z.ZodBoolean>;
    handleEdits: z.ZodOptional<z.ZodBoolean>;
    ignoreCooldown: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    ignorePermissions: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    prefix: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>>;
    storeMessages: z.ZodOptional<z.ZodBoolean>;
    typing: z.ZodOptional<z.ZodBoolean>;
    execSlash: z.ZodOptional<z.ZodBoolean>;
    skipBuiltInPostInhibitors: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    directory: z.ZodString;
    classToHandle: z.ZodAny;
    extensions: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodSet<z.ZodString>]>>;
    automateCategories: z.ZodOptional<z.ZodBoolean>;
    loadFilter: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodBoolean>>;
    aliasReplacement: z.ZodOptional<z.ZodType<RegExp, z.ZodTypeDef, RegExp>>;
    allowMention: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodBoolean, z.ZodPromise<z.ZodBoolean>]>>]>>;
    argumentDefaults: z.ZodOptional<z.ZodObject<{
        modifyOtherwise: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        otherwise: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        prompt: z.ZodOptional<z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<FlagType.Fail>, z.ZodTypeDef, Flag<FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }>>;
    autoDefer: z.ZodOptional<z.ZodBoolean>;
    autoRegisterSlashCommands: z.ZodOptional<z.ZodBoolean>;
    blockBots: z.ZodOptional<z.ZodBoolean>;
    blockClient: z.ZodOptional<z.ZodBoolean>;
    commandUtil: z.ZodOptional<z.ZodBoolean>;
    commandUtilLifetime: z.ZodOptional<z.ZodNumber>;
    commandUtilSweepInterval: z.ZodOptional<z.ZodNumber>;
    defaultCooldown: z.ZodOptional<z.ZodNumber>;
    fetchMembers: z.ZodOptional<z.ZodBoolean>;
    handleEdits: z.ZodOptional<z.ZodBoolean>;
    ignoreCooldown: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    ignorePermissions: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    prefix: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>>;
    storeMessages: z.ZodOptional<z.ZodBoolean>;
    typing: z.ZodOptional<z.ZodBoolean>;
    execSlash: z.ZodOptional<z.ZodBoolean>;
    skipBuiltInPostInhibitors: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">>;
export type CooldownData = {
    end: number;
    timer: NodeJS.Timer;
    uses: number;
};
export type ParsedComponentData = {
    afterPrefix?: string;
    alias?: string;
    command?: Command;
    content?: string;
    prefix?: string;
};
export type SlashResolveType = "Attachment" | "Boolean" | "Channel" | "Integer" | "Member" | "Mentionable" | "Number" | "Role" | "String" | "User";
export declare const SlashResolveType: z.ZodEnum<["Attachment", "Boolean", "Channel", "Integer", "Member", "Mentionable", "Number", "Role", "String", "User"]>;
export {};
//# sourceMappingURL=CommandHandler.d.ts.map