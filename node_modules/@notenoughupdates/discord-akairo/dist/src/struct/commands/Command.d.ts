import type { ApplicationCommandOptionData, ApplicationCommandSubCommandData, ApplicationCommandSubGroupData, AutocompleteInteraction, LocalizationMap, Message, PermissionResolvable, Snowflake } from "discord.js";
import { z } from "zod";
import { ArrayOrNot, SyncOrAsync } from "../../typings/Util.js";
import { AkairoMessage } from "../../util/AkairoMessage.js";
import { AkairoModule, AkairoModuleOptions } from "../AkairoModule.js";
import { Argument, ArgumentOptions, DefaultArgumentOptions, type ArgumentTypeCasterReturn } from "./arguments/Argument.js";
import { ArgumentRunnerState } from "./arguments/ArgumentRunner.js";
import { CommandHandler, IgnoreCheckPredicate, PrefixSupplier, SlashResolveType } from "./CommandHandler.js";
import { ContentParserResult } from "./ContentParser.js";
import type { Flag } from "./Flag.js";
export declare abstract class Command extends AkairoModule<CommandHandler, Command> {
    aliases: string[];
    private contentParser;
    private argumentRunner;
    argumentDefaults: DefaultArgumentOptions;
    private argumentGenerator;
    channel: string | null;
    ownerOnly: boolean;
    clientPermissions: PermissionResolvable | MissingPermissionSupplier;
    cooldown: number | null;
    description: string | any;
    editable: boolean;
    ignoreCooldown?: Snowflake | Snowflake[] | IgnoreCheckPredicate;
    ignorePermissions?: Snowflake | Snowflake[] | OmitThisParameter<IgnoreCheckPredicate>;
    localization: CommandLocalization;
    lock?: KeySupplier;
    locker?: Set<string>;
    onlyNsfw: boolean;
    superUserOnly: boolean;
    prefix?: string | string[] | PrefixSupplier;
    ratelimit: number;
    regex?: RegExp | RegexSupplier;
    slash?: boolean;
    slashDefaultMemberPermissions?: PermissionResolvable | null;
    slashDmPermission?: boolean;
    slashEphemeral?: boolean;
    slashGuilds?: Snowflake[];
    slashOptions?: SlashOption[];
    slashOnly: boolean;
    typing: boolean;
    userPermissions?: PermissionResolvable | MissingPermissionSupplier;
    constructor(id: string, options?: CommandOptions);
    parse(message: Message, content: string): Promise<Flag | any>;
}
export interface Command {
    args(message: Message, parsed: ContentParserResult, state: ArgumentRunnerState): ArgumentGeneratorReturn;
    before(message: Message): any;
    condition(message: Message): SyncOrAsync<boolean>;
    exec(message: Message, args: CommandArguments): any;
    exec(message: Message | AkairoMessage, args: CommandArguments): any;
    execSlash(message: AkairoMessage, args: CommandArguments): any;
    autocomplete(interaction: AutocompleteInteraction): any;
}
export type CommandArguments = {
    [key: string]: any;
};
export declare const CommandArguments: z.ZodRecord<z.ZodString, z.ZodAny>;
export type ArgumentGenerator = (message: Message, parsed: ContentParserResult, state: ArgumentRunnerState) => ArgumentGeneratorReturn;
export declare const ArgumentGenerator: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
    all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    phrases: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    flags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    optionFlags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    phrases: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    flags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    optionFlags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    phrases: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Phrase">;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    flags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"Flag">;
        key: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    optionFlags: z.ZodArray<z.ZodObject<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        raw: z.ZodString;
        type: z.ZodLiteral<"OptionFlag">;
        key: z.ZodString;
        value: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    index: z.ZodNumber;
    phraseIndex: z.ZodNumber;
    usedIndices: z.ZodSet<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    index: number;
    phraseIndex: number;
    usedIndices: Set<number>;
}, {
    index: number;
    phraseIndex: number;
    usedIndices: Set<number>;
}>], z.ZodUnknown>, z.ZodAny>;
export type ArgumentGeneratorReturn = Generator<ArgumentOptions | Argument | Flag, {
    [args: string]: ArgumentTypeCasterReturn<unknown>;
} | Flag, Flag | any>;
export type BeforeAction = (this: Command, message: Message) => any;
export declare const BeforeAction: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodAny>;
export type MissingPermissionSupplier = (message: Message | AkairoMessage) => SyncOrAsync<any>;
export declare const MissingPermissionSupplier: z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodAny, z.ZodPromise<z.ZodAny>]>>;
export type ExecutionPredicate = (this: Command, message: Message) => SyncOrAsync<boolean>;
export declare const ExecutionPredicate: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodBoolean, z.ZodPromise<z.ZodBoolean>]>>;
export type KeySupplier = (message: Message | AkairoMessage, args: CommandArguments) => string;
export declare const KeySupplier: z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodRecord<z.ZodString, z.ZodAny>], z.ZodUnknown>, z.ZodString>;
export type RegexSupplier = (message: Message) => RegExp;
export declare const RegexSupplier: z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>>;
export type CommandOptions = AkairoModuleOptions & {
    aliases?: string[];
    args?: ArgumentOptions[] | ArgumentGenerator;
    argumentDefaults?: DefaultArgumentOptions;
    before?: BeforeAction;
    channel?: "guild" | "dm" | null;
    clientPermissions?: PermissionResolvable | MissingPermissionSupplier;
    condition?: ExecutionPredicate;
    cooldown?: number | null;
    description?: string | ArrayOrNot<any>;
    editable?: boolean;
    flags?: string[];
    ignoreCooldown?: ArrayOrNot<Snowflake> | IgnoreCheckPredicate;
    ignorePermissions?: ArrayOrNot<Snowflake> | IgnoreCheckPredicate;
    localization?: CommandLocalization;
    lock?: KeySupplier | "guild" | "channel" | "user";
    onlyNsfw?: boolean;
    optionFlags?: string[];
    ownerOnly?: boolean;
    prefix?: ArrayOrNot<string> | PrefixSupplier;
    quoted?: boolean;
    ratelimit?: number;
    regex?: RegExp | RegexSupplier;
    separator?: string;
    slash?: boolean;
    slashDefaultMemberPermissions?: PermissionResolvable | null;
    slashDmPermission?: boolean;
    slashEphemeral?: boolean;
    slashGuilds?: string[];
    slashOptions?: SlashOption[];
    slashOnly?: boolean;
    superUserOnly?: boolean;
    typing?: boolean;
    userPermissions?: PermissionResolvable | MissingPermissionSupplier;
};
export declare const CommandOptions: z.ZodObject<{
    category: z.ZodOptional<z.ZodString>;
    aliases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    args: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        default: z.ZodAny;
        description: z.ZodAny;
        flag: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
        id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        index: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        limit: z.ZodOptional<z.ZodNumber>;
        match: z.ZodOptional<z.ZodNativeEnum<typeof import("../../util/Constants.js").ArgumentMatches>>;
        modifyOtherwise: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>>>;
        multipleFlags: z.ZodOptional<z.ZodBoolean>;
        otherwise: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>>;
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>, z.ZodBoolean]>>>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, "many">, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodString], z.ZodUnknown>, z.ZodAny>]>>;
        unordered: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>;
    }, "strip", z.ZodTypeAny, {
        default?: any;
        description?: any;
        flag?: string | string[] | null | undefined;
        id?: string | null | undefined;
        index?: number | null | undefined;
        limit?: number | undefined;
        match?: import("../../util/Constants.js").ArgumentMatches | undefined;
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        multipleFlags?: boolean | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        prompt?: boolean | {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | null | undefined;
        type?: string | RegExp | (string | string[])[] | ((args_0: Message<boolean>, args_1: string, ...args_2: unknown[]) => any) | undefined;
        unordered?: number | boolean | number[] | undefined;
    }, {
        default?: any;
        description?: any;
        flag?: string | string[] | null | undefined;
        id?: string | null | undefined;
        index?: number | null | undefined;
        limit?: number | undefined;
        match?: import("../../util/Constants.js").ArgumentMatches | undefined;
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        multipleFlags?: boolean | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        prompt?: boolean | {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | null | undefined;
        type?: string | RegExp | (string | string[])[] | ((args_0: Message<boolean>, args_1: string, ...args_2: unknown[]) => any) | undefined;
        unordered?: number | boolean | number[] | undefined;
    }>, "many">, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        index: z.ZodNumber;
        phraseIndex: z.ZodNumber;
        usedIndices: z.ZodSet<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        index: number;
        phraseIndex: number;
        usedIndices: Set<number>;
    }, {
        index: number;
        phraseIndex: number;
        usedIndices: Set<number>;
    }>], z.ZodUnknown>, z.ZodAny>]>>;
    argumentDefaults: z.ZodOptional<z.ZodObject<{
        modifyOtherwise: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        otherwise: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        prompt: z.ZodOptional<z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }>>;
    before: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodAny>>;
    channel: z.ZodOptional<z.ZodNullable<z.ZodEnum<["guild", "dm"]>>>;
    clientPermissions: z.ZodOptional<z.ZodUnion<[z.ZodType<PermissionResolvable, any, PermissionResolvable>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodAny, z.ZodPromise<z.ZodAny>]>>]>>;
    condition: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodBoolean, z.ZodPromise<z.ZodBoolean>]>>>;
    cooldown: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodAny, z.ZodArray<z.ZodAny, "many">]>]>>;
    editable: z.ZodOptional<z.ZodBoolean>;
    flags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    ignoreCooldown: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    ignorePermissions: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    localization: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    lock: z.ZodOptional<z.ZodUnion<[z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodRecord<z.ZodString, z.ZodAny>], z.ZodUnknown>, z.ZodString>, z.ZodEnum<["guild", "channel", "user"]>]>>;
    onlyNsfw: z.ZodOptional<z.ZodBoolean>;
    optionFlags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    ownerOnly: z.ZodOptional<z.ZodBoolean>;
    prefix: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>>;
    quoted: z.ZodOptional<z.ZodBoolean>;
    ratelimit: z.ZodOptional<z.ZodNumber>;
    regex: z.ZodOptional<z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>>]>>;
    separator: z.ZodOptional<z.ZodString>;
    slash: z.ZodOptional<z.ZodBoolean>;
    slashDefaultMemberPermissions: z.ZodOptional<z.ZodNullable<z.ZodType<PermissionResolvable, any, PermissionResolvable>>>;
    slashDmPermission: z.ZodOptional<z.ZodBoolean>;
    slashEphemeral: z.ZodOptional<z.ZodBoolean>;
    slashGuilds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    slashOptions: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    slashOnly: z.ZodOptional<z.ZodBoolean>;
    superUserOnly: z.ZodOptional<z.ZodBoolean>;
    typing: z.ZodOptional<z.ZodBoolean>;
    userPermissions: z.ZodOptional<z.ZodUnion<[z.ZodType<PermissionResolvable, any, PermissionResolvable>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodAny, z.ZodPromise<z.ZodAny>]>>]>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    category: z.ZodOptional<z.ZodString>;
    aliases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    args: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        default: z.ZodAny;
        description: z.ZodAny;
        flag: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
        id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        index: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        limit: z.ZodOptional<z.ZodNumber>;
        match: z.ZodOptional<z.ZodNativeEnum<typeof import("../../util/Constants.js").ArgumentMatches>>;
        modifyOtherwise: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>>>;
        multipleFlags: z.ZodOptional<z.ZodBoolean>;
        otherwise: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>>;
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>, z.ZodBoolean]>>>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, "many">, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodString], z.ZodUnknown>, z.ZodAny>]>>;
        unordered: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>;
    }, "strip", z.ZodTypeAny, {
        default?: any;
        description?: any;
        flag?: string | string[] | null | undefined;
        id?: string | null | undefined;
        index?: number | null | undefined;
        limit?: number | undefined;
        match?: import("../../util/Constants.js").ArgumentMatches | undefined;
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        multipleFlags?: boolean | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        prompt?: boolean | {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | null | undefined;
        type?: string | RegExp | (string | string[])[] | ((args_0: Message<boolean>, args_1: string, ...args_2: unknown[]) => any) | undefined;
        unordered?: number | boolean | number[] | undefined;
    }, {
        default?: any;
        description?: any;
        flag?: string | string[] | null | undefined;
        id?: string | null | undefined;
        index?: number | null | undefined;
        limit?: number | undefined;
        match?: import("../../util/Constants.js").ArgumentMatches | undefined;
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        multipleFlags?: boolean | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        prompt?: boolean | {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | null | undefined;
        type?: string | RegExp | (string | string[])[] | ((args_0: Message<boolean>, args_1: string, ...args_2: unknown[]) => any) | undefined;
        unordered?: number | boolean | number[] | undefined;
    }>, "many">, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        index: z.ZodNumber;
        phraseIndex: z.ZodNumber;
        usedIndices: z.ZodSet<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        index: number;
        phraseIndex: number;
        usedIndices: Set<number>;
    }, {
        index: number;
        phraseIndex: number;
        usedIndices: Set<number>;
    }>], z.ZodUnknown>, z.ZodAny>]>>;
    argumentDefaults: z.ZodOptional<z.ZodObject<{
        modifyOtherwise: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        otherwise: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        prompt: z.ZodOptional<z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }>>;
    before: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodAny>>;
    channel: z.ZodOptional<z.ZodNullable<z.ZodEnum<["guild", "dm"]>>>;
    clientPermissions: z.ZodOptional<z.ZodUnion<[z.ZodType<PermissionResolvable, any, PermissionResolvable>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodAny, z.ZodPromise<z.ZodAny>]>>]>>;
    condition: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodBoolean, z.ZodPromise<z.ZodBoolean>]>>>;
    cooldown: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodAny, z.ZodArray<z.ZodAny, "many">]>]>>;
    editable: z.ZodOptional<z.ZodBoolean>;
    flags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    ignoreCooldown: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    ignorePermissions: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    localization: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    lock: z.ZodOptional<z.ZodUnion<[z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodRecord<z.ZodString, z.ZodAny>], z.ZodUnknown>, z.ZodString>, z.ZodEnum<["guild", "channel", "user"]>]>>;
    onlyNsfw: z.ZodOptional<z.ZodBoolean>;
    optionFlags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    ownerOnly: z.ZodOptional<z.ZodBoolean>;
    prefix: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>>;
    quoted: z.ZodOptional<z.ZodBoolean>;
    ratelimit: z.ZodOptional<z.ZodNumber>;
    regex: z.ZodOptional<z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>>]>>;
    separator: z.ZodOptional<z.ZodString>;
    slash: z.ZodOptional<z.ZodBoolean>;
    slashDefaultMemberPermissions: z.ZodOptional<z.ZodNullable<z.ZodType<PermissionResolvable, any, PermissionResolvable>>>;
    slashDmPermission: z.ZodOptional<z.ZodBoolean>;
    slashEphemeral: z.ZodOptional<z.ZodBoolean>;
    slashGuilds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    slashOptions: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    slashOnly: z.ZodOptional<z.ZodBoolean>;
    superUserOnly: z.ZodOptional<z.ZodBoolean>;
    typing: z.ZodOptional<z.ZodBoolean>;
    userPermissions: z.ZodOptional<z.ZodUnion<[z.ZodType<PermissionResolvable, any, PermissionResolvable>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodAny, z.ZodPromise<z.ZodAny>]>>]>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    category: z.ZodOptional<z.ZodString>;
    aliases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    args: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        default: z.ZodAny;
        description: z.ZodAny;
        flag: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
        id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        index: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        limit: z.ZodOptional<z.ZodNumber>;
        match: z.ZodOptional<z.ZodNativeEnum<typeof import("../../util/Constants.js").ArgumentMatches>>;
        modifyOtherwise: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>>>;
        multipleFlags: z.ZodOptional<z.ZodBoolean>;
        otherwise: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>>;
        prompt: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>, z.ZodBoolean]>>>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, "many">, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodString], z.ZodUnknown>, z.ZodAny>]>>;
        unordered: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>;
    }, "strip", z.ZodTypeAny, {
        default?: any;
        description?: any;
        flag?: string | string[] | null | undefined;
        id?: string | null | undefined;
        index?: number | null | undefined;
        limit?: number | undefined;
        match?: import("../../util/Constants.js").ArgumentMatches | undefined;
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        multipleFlags?: boolean | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        prompt?: boolean | {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | null | undefined;
        type?: string | RegExp | (string | string[])[] | ((args_0: Message<boolean>, args_1: string, ...args_2: unknown[]) => any) | undefined;
        unordered?: number | boolean | number[] | undefined;
    }, {
        default?: any;
        description?: any;
        flag?: string | string[] | null | undefined;
        id?: string | null | undefined;
        index?: number | null | undefined;
        limit?: number | undefined;
        match?: import("../../util/Constants.js").ArgumentMatches | undefined;
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        multipleFlags?: boolean | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | null | undefined;
        prompt?: boolean | {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | null | undefined;
        type?: string | RegExp | (string | string[])[] | ((args_0: Message<boolean>, args_1: string, ...args_2: unknown[]) => any) | undefined;
        unordered?: number | boolean | number[] | undefined;
    }>, "many">, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        all: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
        phrases: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Phrase">;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        flags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"Flag">;
            key: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        optionFlags: z.ZodArray<z.ZodObject<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            raw: z.ZodString;
            type: z.ZodLiteral<"OptionFlag">;
            key: z.ZodString;
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, "many">;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        index: z.ZodNumber;
        phraseIndex: z.ZodNumber;
        usedIndices: z.ZodSet<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        index: number;
        phraseIndex: number;
        usedIndices: Set<number>;
    }, {
        index: number;
        phraseIndex: number;
        usedIndices: Set<number>;
    }>], z.ZodUnknown>, z.ZodAny>]>>;
    argumentDefaults: z.ZodOptional<z.ZodObject<{
        modifyOtherwise: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
        otherwise: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
            phrase: z.ZodString;
            failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
        }, "strip", z.ZodTypeAny, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        prompt: z.ZodOptional<z.ZodObject<{
            breakout: z.ZodOptional<z.ZodBoolean>;
            cancel: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            cancelWord: z.ZodOptional<z.ZodString>;
            ended: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            infinite: z.ZodOptional<z.ZodBoolean>;
            limit: z.ZodOptional<z.ZodNumber>;
            modifyCancel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyEnded: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyRetry: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyStart: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            modifyTimeout: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>>;
            optional: z.ZodOptional<z.ZodBoolean>;
            retries: z.ZodOptional<z.ZodNumber>;
            retry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            start: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
            stopWord: z.ZodOptional<z.ZodString>;
            time: z.ZodOptional<z.ZodNumber>;
            timeout: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodObject<{
                retries: z.ZodNumber;
                infinite: z.ZodBoolean;
                message: z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>;
                phrase: z.ZodString;
                failure: z.ZodNullable<z.ZodType<Flag<import("./Flag.js").FlagType.Fail>, z.ZodTypeDef, Flag<import("./Flag.js").FlagType.Fail>>>;
            }, "strip", z.ZodTypeAny, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodType<import("discord.js").MessagePayload, z.ZodTypeDef, import("discord.js").MessagePayload>, z.ZodRecord<z.ZodString, z.ZodAny>]>>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }, {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }, {
        modifyOtherwise?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        otherwise?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
            failure: Flag<import("./Flag.js").FlagType.Fail> | null;
            phrase: string;
        }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        prompt?: {
            breakout?: boolean | undefined;
            cancel?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            cancelWord?: string | undefined;
            ended?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            infinite?: boolean | undefined;
            limit?: number | undefined;
            modifyCancel?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyEnded?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyRetry?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyStart?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            modifyTimeout?: ((args_0: Message<boolean>, args_1: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>), ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            optional?: boolean | undefined;
            retries?: number | undefined;
            retry?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            start?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
            stopWord?: string | undefined;
            time?: number | undefined;
            timeout?: string | Record<string, any> | import("discord.js").MessagePayload | ((args_0: Message<boolean>, args_1: {
                message: Message<boolean>;
                failure: Flag<import("./Flag.js").FlagType.Fail> | null;
                phrase: string;
                retries: number;
                infinite: boolean;
            }, ...args_2: unknown[]) => string | Record<string, any> | import("discord.js").MessagePayload | Promise<string | Record<string, any> | import("discord.js").MessagePayload>) | undefined;
        } | undefined;
    }>>;
    before: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodAny>>;
    channel: z.ZodOptional<z.ZodNullable<z.ZodEnum<["guild", "dm"]>>>;
    clientPermissions: z.ZodOptional<z.ZodUnion<[z.ZodType<PermissionResolvable, any, PermissionResolvable>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodAny, z.ZodPromise<z.ZodAny>]>>]>>;
    condition: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodBoolean, z.ZodPromise<z.ZodBoolean>]>>>;
    cooldown: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodAny, z.ZodArray<z.ZodAny, "many">]>]>>;
    editable: z.ZodOptional<z.ZodBoolean>;
    flags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    ignoreCooldown: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    ignorePermissions: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodType<Command, z.ZodTypeDef, Command>], z.ZodUnknown>, z.ZodBoolean>]>>;
    localization: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    lock: z.ZodOptional<z.ZodUnion<[z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>, z.ZodRecord<z.ZodString, z.ZodAny>], z.ZodUnknown>, z.ZodString>, z.ZodEnum<["guild", "channel", "user"]>]>>;
    onlyNsfw: z.ZodOptional<z.ZodBoolean>;
    optionFlags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    ownerOnly: z.ZodOptional<z.ZodBoolean>;
    prefix: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodPromise<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>]>>]>>;
    quoted: z.ZodOptional<z.ZodBoolean>;
    ratelimit: z.ZodOptional<z.ZodNumber>;
    regex: z.ZodOptional<z.ZodUnion<[z.ZodType<RegExp, z.ZodTypeDef, RegExp>, z.ZodFunction<z.ZodTuple<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>], z.ZodUnknown>, z.ZodType<RegExp, z.ZodTypeDef, RegExp>>]>>;
    separator: z.ZodOptional<z.ZodString>;
    slash: z.ZodOptional<z.ZodBoolean>;
    slashDefaultMemberPermissions: z.ZodOptional<z.ZodNullable<z.ZodType<PermissionResolvable, any, PermissionResolvable>>>;
    slashDmPermission: z.ZodOptional<z.ZodBoolean>;
    slashEphemeral: z.ZodOptional<z.ZodBoolean>;
    slashGuilds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    slashOptions: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    slashOnly: z.ZodOptional<z.ZodBoolean>;
    superUserOnly: z.ZodOptional<z.ZodBoolean>;
    typing: z.ZodOptional<z.ZodBoolean>;
    userPermissions: z.ZodOptional<z.ZodUnion<[z.ZodType<PermissionResolvable, any, PermissionResolvable>, z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Message<boolean>, z.ZodTypeDef, Message<boolean>>, z.ZodType<AkairoMessage<import("discord.js").CacheType>, z.ZodTypeDef, AkairoMessage<import("discord.js").CacheType>>]>], z.ZodUnknown>, z.ZodUnion<[z.ZodAny, z.ZodPromise<z.ZodAny>]>>]>>;
}, z.ZodTypeAny, "passthrough">>;
export interface SlashExt {
    resolve?: SlashResolveType;
}
type Sub = Pick<ApplicationCommandSubGroupData, "options"> | Pick<ApplicationCommandSubCommandData, "options">;
type GetNonSub<T> = T extends Sub ? never : T & SlashExt;
export type SlashNonSub = GetNonSub<ApplicationCommandOptionData>;
export interface ExtGroup extends ApplicationCommandSubGroupData {
    options: ExtSub[];
}
export interface ExtSub extends ApplicationCommandSubCommandData {
    options?: SlashNonSub[];
}
export type SlashSub = ExtGroup | ExtSub;
export type SlashOption = SlashNonSub | SlashSub;
export type CommandLocalization = Partial<Record<"nameLocalizations" | "descriptionLocalizations", LocalizationMap>>;
export declare const CommandInstance: z.ZodType<Command, z.ZodTypeDef, Command>;
export {};
//# sourceMappingURL=Command.d.ts.map