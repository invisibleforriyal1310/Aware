import { Collection, MessagePayload, type InteractionEditReplyOptions, type InteractionReplyOptions, type Message, type MessageCreateOptions, type MessageEditOptions, type MessageReplyOptions, type Snowflake } from "discord.js";
import { AkairoMessage } from "../../util/AkairoMessage.js";
import type { ContextMenuCommandHandler } from "../contextMenuCommands/ContextMenuCommandHandler.js";
import { CommandHandler, type ParsedComponentData } from "./CommandHandler.js";
export declare class CommandUtil<MessageType extends AkairoMessage | Message> {
    static deletedMessages: Set<string>;
    handler: CommandHandler | ContextMenuCommandHandler;
    isSlash: boolean;
    lastResponse: Message | null;
    message: MessageType;
    messages: Collection<Snowflake, Message> | null;
    parsed: ParsedComponentData | null;
    shouldEdit: boolean;
    get deleted(): boolean;
    constructor(handler: CommandHandler | ContextMenuCommandHandler, message: MessageType);
    isSlashMessage(message: Message | AkairoMessage): message is AkairoMessage;
    addMessage(message: Message): Message;
    addMessage(message: Message[]): Message[];
    edit(options: string | MessageEditOptions | MessagePayload): Promise<Message>;
    edit(options: string | InteractionEditReplyOptions | MessagePayload): Promise<Message>;
    reply(options: string | MessagePayload | MessageReplyOptions): Promise<Message>;
    reply(options: string | MessagePayload | InteractionReplyOptions): Promise<Message>;
    send(options: string | MessagePayload | MessageCreateOptions): Promise<Message>;
    send(options: string | MessagePayload | InteractionReplyOptions): Promise<Message>;
    sendNew(options: string | MessagePayload | MessageCreateOptions): Promise<Message>;
    sendNew(options: string | MessagePayload | InteractionReplyOptions): Promise<Message>;
    setEditable(state: boolean): CommandUtil<MessageType>;
    setLastResponse(message: Message): Message;
    delete(): Promise<Message | void>;
}
//# sourceMappingURL=CommandUtil.d.ts.map