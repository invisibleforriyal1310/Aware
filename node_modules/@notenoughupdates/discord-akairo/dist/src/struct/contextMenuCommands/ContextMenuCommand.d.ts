import { ApplicationCommandType, type ContextMenuCommandInteraction, type LocalizationMap, type PermissionResolvable, type Snowflake } from "discord.js";
import { z } from "zod";
import { AkairoModule, AkairoModuleOptions } from "../AkairoModule.js";
import type { ContextMenuCommandHandler } from "./ContextMenuCommandHandler.js";
export declare abstract class ContextMenuCommand extends AkairoModule<ContextMenuCommandHandler, ContextMenuCommand> {
    guilds?: Snowflake[];
    name: string;
    ownerOnly: boolean;
    superUserOnly: boolean;
    type: ApplicationCommandType.User | ApplicationCommandType.Message;
    nameLocalizations?: LocalizationMap;
    defaultMemberPermissions?: PermissionResolvable | null;
    dmPermission?: boolean;
    constructor(id: string, options: ContextMenuCommandOptions);
    abstract exec(interaction: ContextMenuCommandInteraction): any;
}
export type ContextMenuCommandOptions = AkairoModuleOptions & {
    guilds?: Snowflake[];
    name: string;
    ownerOnly?: boolean;
    superUserOnly?: boolean;
    type: ApplicationCommandType.User | ApplicationCommandType.Message;
    nameLocalizations?: LocalizationMap;
    defaultMemberPermissions?: PermissionResolvable | null;
    dmPermission?: boolean;
};
export declare const ContextMenuCommandOptions: z.ZodObject<{
    category: z.ZodOptional<z.ZodString>;
    guilds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    name: z.ZodString;
    ownerOnly: z.ZodOptional<z.ZodBoolean>;
    superUserOnly: z.ZodOptional<z.ZodBoolean>;
    type: z.ZodUnion<[z.ZodLiteral<ApplicationCommandType.User>, z.ZodLiteral<ApplicationCommandType.Message>]>;
    nameLocalizations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
    defaultMemberPermissions: z.ZodOptional<z.ZodNullable<z.ZodType<PermissionResolvable, any, PermissionResolvable>>>;
    dmPermission: z.ZodOptional<z.ZodBoolean>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    category: z.ZodOptional<z.ZodString>;
    guilds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    name: z.ZodString;
    ownerOnly: z.ZodOptional<z.ZodBoolean>;
    superUserOnly: z.ZodOptional<z.ZodBoolean>;
    type: z.ZodUnion<[z.ZodLiteral<ApplicationCommandType.User>, z.ZodLiteral<ApplicationCommandType.Message>]>;
    nameLocalizations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
    defaultMemberPermissions: z.ZodOptional<z.ZodNullable<z.ZodType<PermissionResolvable, any, PermissionResolvable>>>;
    dmPermission: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    category: z.ZodOptional<z.ZodString>;
    guilds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    name: z.ZodString;
    ownerOnly: z.ZodOptional<z.ZodBoolean>;
    superUserOnly: z.ZodOptional<z.ZodBoolean>;
    type: z.ZodUnion<[z.ZodLiteral<ApplicationCommandType.User>, z.ZodLiteral<ApplicationCommandType.Message>]>;
    nameLocalizations: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
    defaultMemberPermissions: z.ZodOptional<z.ZodNullable<z.ZodType<PermissionResolvable, any, PermissionResolvable>>>;
    dmPermission: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">>;
//# sourceMappingURL=ContextMenuCommand.d.ts.map