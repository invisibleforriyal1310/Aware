import type { Awaitable, ContextMenuCommandInteraction } from "discord.js";
import type { ContextMenuCommandHandlerEvents } from "../../typings/events.js";
import type { AkairoClient } from "../AkairoClient.js";
import { AkairoHandler, AkairoHandlerOptions } from "../AkairoHandler.js";
import type { InhibitorHandler } from "../inhibitors/InhibitorHandler.js";
import { ContextMenuCommand } from "./ContextMenuCommand.js";
export declare class ContextMenuCommandHandler extends AkairoHandler<ContextMenuCommand, ContextMenuCommandHandler> {
    inhibitorHandler?: InhibitorHandler;
    constructor(client: AkairoClient, options: ContextMenuCommandHandlerOptions);
    protected setup(): void;
    handle(interaction: ContextMenuCommandInteraction): Promise<boolean | null>;
    emitError(err: Error, interaction: ContextMenuCommandInteraction, command: ContextMenuCommand): void;
}
type Events = ContextMenuCommandHandlerEvents;
export interface ContextMenuCommandHandler extends AkairoHandler<ContextMenuCommand, ContextMenuCommandHandler> {
    on<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
    once<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
}
export type ContextMenuCommandHandlerOptions = AkairoHandlerOptions<ContextMenuCommand, ContextMenuCommandHandler>;
export {};
//# sourceMappingURL=ContextMenuCommandHandler.d.ts.map