import EventEmitter from "node:events";
import { z } from "zod";
import { AkairoModule, AkairoModuleOptions } from "../AkairoModule.js";
import type { ListenerHandler } from "./ListenerHandler.js";
export declare abstract class Listener extends AkairoModule<ListenerHandler, Listener> {
    emitter: string | EventEmitter;
    event: string;
    type: ListenerType;
    constructor(id: string, options: ListenerOptions);
    abstract exec(...args: any[]): any;
}
export type ListenerType = "on" | "once" | "prependListener" | "prependOnceListener";
export declare const ListenerType: z.ZodEnum<["on", "once", "prependListener", "prependOnceListener"]>;
export type ListenerOptions = AkairoModuleOptions & {
    emitter: string | EventEmitter;
    event: string;
    type?: ListenerType;
};
export declare const ListenerOptions: z.ZodObject<{
    category: z.ZodOptional<z.ZodString>;
    emitter: z.ZodUnion<[z.ZodString, z.ZodType<EventEmitter, z.ZodTypeDef, EventEmitter>]>;
    event: z.ZodString;
    type: z.ZodOptional<z.ZodEnum<["on", "once", "prependListener", "prependOnceListener"]>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    category: z.ZodOptional<z.ZodString>;
    emitter: z.ZodUnion<[z.ZodString, z.ZodType<EventEmitter, z.ZodTypeDef, EventEmitter>]>;
    event: z.ZodString;
    type: z.ZodOptional<z.ZodEnum<["on", "once", "prependListener", "prependOnceListener"]>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    category: z.ZodOptional<z.ZodString>;
    emitter: z.ZodUnion<[z.ZodString, z.ZodType<EventEmitter, z.ZodTypeDef, EventEmitter>]>;
    event: z.ZodString;
    type: z.ZodOptional<z.ZodEnum<["on", "once", "prependListener", "prependOnceListener"]>>;
}, z.ZodTypeAny, "passthrough">>;
//# sourceMappingURL=Listener.d.ts.map