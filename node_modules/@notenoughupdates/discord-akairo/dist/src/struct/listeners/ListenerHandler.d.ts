import { Awaitable, Collection } from "discord.js";
import type EventEmitter from "node:events";
import type { ListenerHandlerEvents } from "../../typings/events.js";
import type { AkairoClient } from "../AkairoClient.js";
import { AkairoHandler, type AkairoHandlerOptions } from "../AkairoHandler.js";
import { Listener } from "./Listener.js";
export declare class ListenerHandler extends AkairoHandler<Listener, ListenerHandler> {
    classToHandle: typeof Listener;
    emitters: Collection<string, EventEmitter>;
    constructor(client: AkairoClient, options: ListenerHandlerOptions);
    addToEmitter(id: string): Listener;
    deregister(listener: Listener): void;
    register(listener: Listener, filepath?: string): void;
    removeFromEmitter(id: string): Listener;
    setEmitters(emitters: any): ListenerHandler;
}
type Events = ListenerHandlerEvents;
export interface ListenerHandler extends AkairoHandler<Listener, ListenerHandler> {
    on<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
    once<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
}
export type ListenerHandlerOptions = AkairoHandlerOptions<Listener, ListenerHandler>;
export {};
//# sourceMappingURL=ListenerHandler.d.ts.map