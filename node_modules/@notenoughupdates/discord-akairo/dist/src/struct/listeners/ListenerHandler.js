"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListenerHandler = void 0;
const discord_js_1 = require("discord.js");
const AkairoError_js_1 = require("../../util/AkairoError.js");
const Util_js_1 = require("../../util/Util.js");
const AkairoHandler_js_1 = require("../AkairoHandler.js");
const Listener_js_1 = require("./Listener.js");
class ListenerHandler extends AkairoHandler_js_1.AkairoHandler {
    constructor(client, options) {
        const { directory, classToHandle = Listener_js_1.Listener, extensions = [".js", ".ts"], automateCategories, loadFilter } = options;
        if (!(classToHandle.prototype instanceof Listener_js_1.Listener || classToHandle === Listener_js_1.Listener)) {
            throw new AkairoError_js_1.AkairoError("INVALID_CLASS_TO_HANDLE", classToHandle.name, Listener_js_1.Listener.name);
        }
        super(client, { directory, classToHandle, extensions, automateCategories, loadFilter });
        this.emitters = new discord_js_1.Collection();
        this.emitters.set("client", this.client);
    }
    addToEmitter(id) {
        const listener = this.modules.get(id.toString());
        if (!listener)
            throw new AkairoError_js_1.AkairoError("MODULE_NOT_FOUND", this.classToHandle.name, id);
        const emitter = (0, Util_js_1.isEventEmitter)(listener.emitter) ? listener.emitter : this.emitters.get(listener.emitter);
        if (!(0, Util_js_1.isEventEmitter)(emitter))
            throw new AkairoError_js_1.AkairoError("INVALID_TYPE", "emitter", "EventEmitter", true);
        emitter[listener.type ?? "on"](listener.event, listener.exec);
        return listener;
    }
    deregister(listener) {
        this.removeFromEmitter(listener.id);
        super.deregister(listener);
    }
    register(listener, filepath) {
        super.register(listener, filepath);
        listener.exec = listener.exec.bind(listener);
        this.addToEmitter(listener.id);
    }
    removeFromEmitter(id) {
        const listener = this.modules.get(id.toString());
        if (!listener)
            throw new AkairoError_js_1.AkairoError("MODULE_NOT_FOUND", this.classToHandle.name, id);
        const emitter = (0, Util_js_1.isEventEmitter)(listener.emitter)
            ? listener.emitter
            : this.emitters.get(listener.emitter);
        if (!(0, Util_js_1.isEventEmitter)(emitter))
            throw new AkairoError_js_1.AkairoError("INVALID_TYPE", "emitter", "EventEmitter", true);
        emitter.removeListener(listener.event, listener.exec);
        return listener;
    }
    setEmitters(emitters) {
        for (const [key, value] of Object.entries(emitters)) {
            if (!(0, Util_js_1.isEventEmitter)(value))
                throw new AkairoError_js_1.AkairoError("INVALID_TYPE", key, "EventEmitter", true);
            this.emitters.set(key, value);
        }
        return this;
    }
}
exports.ListenerHandler = ListenerHandler;
//# sourceMappingURL=ListenerHandler.js.map