import { Awaitable, Client, ClientOptions, Snowflake, UserResolvable } from "discord.js";
import { z } from "zod";
import type { AkairoClientEvents } from "../typings/events.js";
import { ArrayOrNot } from "../typings/Util.js";
import * as ClientUtil from "./ClientUtil.js";
export declare class AkairoClient<Ready extends boolean = boolean> extends Client<Ready> {
    ownerID: Snowflake | Snowflake[];
    superUserID: Snowflake | Snowflake[];
    util: typeof ClientUtil;
    constructor(options: AkairoClientOptions & ClientOptions);
    constructor(options: AkairoClientOptions, clientOptions: ClientOptions);
    isOwner(user: UserResolvable): boolean;
    isSuperUser(user: UserResolvable): boolean;
}
type Events = AkairoClientEvents;
export interface AkairoClient<Ready extends boolean = boolean> extends Client<Ready> {
    on<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
    on<S extends string | symbol>(event: Exclude<S, keyof Events>, listener: (...args: any[]) => Awaitable<void>): this;
    once<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
    once<S extends string | symbol>(event: Exclude<S, keyof Events>, listener: (...args: any[]) => Awaitable<void>): this;
    emit<K extends keyof Events>(event: K, ...args: Events[K]): boolean;
    emit<S extends string | symbol>(event: Exclude<S, keyof Events>, ...args: unknown[]): boolean;
    off<K extends keyof Events>(event: K, listener: (...args: Events[K]) => Awaitable<void>): this;
    off<S extends string | symbol>(event: Exclude<S, keyof Events>, listener: (...args: any[]) => Awaitable<void>): this;
    removeAllListeners<K extends keyof Events>(event?: K): this;
    removeAllListeners<S extends string | symbol>(event?: Exclude<S, keyof Events>): this;
}
export type AkairoClientOptions = {
    ownerID?: ArrayOrNot<Snowflake>;
    superUserID?: ArrayOrNot<Snowflake>;
};
export declare const AkairoClientOptions: z.ZodObject<{
    ownerID: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    superUserID: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    ownerID: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    superUserID: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    ownerID: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    superUserID: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, z.ZodTypeAny, "passthrough">>;
export {};
//# sourceMappingURL=AkairoClient.d.ts.map