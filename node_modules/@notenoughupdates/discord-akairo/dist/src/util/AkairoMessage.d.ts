import { Base, type CacheType, type ChatInputCommandInteraction, type InteractionReplyOptions, type Message, type MessagePayload } from "discord.js";
import type { AkairoClient } from "../struct/AkairoClient.js";
import type { CommandUtil } from "../struct/commands/CommandUtil.js";
export declare class AkairoMessage<Cached extends CacheType = CacheType> extends Base {
    author: ChatInputCommandInteraction<Cached>["user"];
    applicationId: ChatInputCommandInteraction<Cached>["applicationId"];
    channelId: ChatInputCommandInteraction<Cached>["channelId"];
    content: string;
    createdTimestamp: ChatInputCommandInteraction<Cached>["createdTimestamp"];
    guildId: ChatInputCommandInteraction<Cached>["guildId"];
    id: ChatInputCommandInteraction<Cached>["id"];
    interaction: ChatInputCommandInteraction<Cached>;
    member: ChatInputCommandInteraction<Cached>["member"];
    partial: false;
    util: CommandUtil<AkairoMessage>;
    constructor(client: AkairoClient<true>, interaction: ChatInputCommandInteraction<Cached>);
    get channel(): ChatInputCommandInteraction<Cached>["channel"];
    get cleanContent(): string | null;
    get guild(): ChatInputCommandInteraction<Cached>["guild"];
    get createdAt(): ChatInputCommandInteraction<Cached>["createdAt"];
    get url(): string | null;
    inGuild(): this is AkairoMessage<"cached">;
    delete(): Promise<void>;
    reply(options: string | MessagePayload | InteractionReplyOptions): Promise<Message>;
}
//# sourceMappingURL=AkairoMessage.d.ts.map