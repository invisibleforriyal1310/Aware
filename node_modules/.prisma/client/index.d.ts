
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Guilds
 * 
 */
export type Guilds = $Result.DefaultSelection<Prisma.$GuildsPayload>
/**
 * Model Afks
 * 
 */
export type Afks = $Result.DefaultSelection<Prisma.$AfksPayload>
/**
 * Model GuildSettings
 * 
 */
export type GuildSettings = $Result.DefaultSelection<Prisma.$GuildSettingsPayload>
/**
 * Model Giveaways
 * 
 */
export type Giveaways = $Result.DefaultSelection<Prisma.$GiveawaysPayload>
/**
 * Model Antinuke
 * 
 */
export type Antinuke = $Result.DefaultSelection<Prisma.$AntinukePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PunishmentType: {
  ban: 'ban',
  kick: 'kick',
  timeout: 'timeout',
  removeroles: 'removeroles'
};

export type PunishmentType = (typeof PunishmentType)[keyof typeof PunishmentType]

}

export type PunishmentType = $Enums.PunishmentType

export const PunishmentType: typeof $Enums.PunishmentType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.guilds`: Exposes CRUD operations for the **Guilds** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guilds
    * const guilds = await prisma.guilds.findMany()
    * ```
    */
  get guilds(): Prisma.GuildsDelegate<ExtArgs>;

  /**
   * `prisma.afks`: Exposes CRUD operations for the **Afks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Afks
    * const afks = await prisma.afks.findMany()
    * ```
    */
  get afks(): Prisma.AfksDelegate<ExtArgs>;

  /**
   * `prisma.guildSettings`: Exposes CRUD operations for the **GuildSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GuildSettings
    * const guildSettings = await prisma.guildSettings.findMany()
    * ```
    */
  get guildSettings(): Prisma.GuildSettingsDelegate<ExtArgs>;

  /**
   * `prisma.giveaways`: Exposes CRUD operations for the **Giveaways** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Giveaways
    * const giveaways = await prisma.giveaways.findMany()
    * ```
    */
  get giveaways(): Prisma.GiveawaysDelegate<ExtArgs>;

  /**
   * `prisma.antinuke`: Exposes CRUD operations for the **Antinuke** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Antinukes
    * const antinukes = await prisma.antinuke.findMany()
    * ```
    */
  get antinuke(): Prisma.AntinukeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Guilds: 'Guilds',
    Afks: 'Afks',
    GuildSettings: 'GuildSettings',
    Giveaways: 'Giveaways',
    Antinuke: 'Antinuke'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'guilds' | 'afks' | 'guildSettings' | 'giveaways' | 'antinuke'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Guilds: {
        payload: Prisma.$GuildsPayload<ExtArgs>
        fields: Prisma.GuildsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuildsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuildsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload>
          }
          findFirst: {
            args: Prisma.GuildsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuildsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload>
          }
          findMany: {
            args: Prisma.GuildsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload>[]
          }
          create: {
            args: Prisma.GuildsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload>
          }
          createMany: {
            args: Prisma.GuildsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GuildsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload>
          }
          update: {
            args: Prisma.GuildsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload>
          }
          deleteMany: {
            args: Prisma.GuildsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GuildsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GuildsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildsPayload>
          }
          aggregate: {
            args: Prisma.GuildsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGuilds>
          }
          groupBy: {
            args: Prisma.GuildsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GuildsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuildsCountArgs<ExtArgs>,
            result: $Utils.Optional<GuildsCountAggregateOutputType> | number
          }
        }
      }
      Afks: {
        payload: Prisma.$AfksPayload<ExtArgs>
        fields: Prisma.AfksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AfksFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AfksFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload>
          }
          findFirst: {
            args: Prisma.AfksFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AfksFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload>
          }
          findMany: {
            args: Prisma.AfksFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload>[]
          }
          create: {
            args: Prisma.AfksCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload>
          }
          createMany: {
            args: Prisma.AfksCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AfksDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload>
          }
          update: {
            args: Prisma.AfksUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload>
          }
          deleteMany: {
            args: Prisma.AfksDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AfksUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AfksUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AfksPayload>
          }
          aggregate: {
            args: Prisma.AfksAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAfks>
          }
          groupBy: {
            args: Prisma.AfksGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AfksGroupByOutputType>[]
          }
          count: {
            args: Prisma.AfksCountArgs<ExtArgs>,
            result: $Utils.Optional<AfksCountAggregateOutputType> | number
          }
        }
      }
      GuildSettings: {
        payload: Prisma.$GuildSettingsPayload<ExtArgs>
        fields: Prisma.GuildSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuildSettingsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuildSettingsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload>
          }
          findFirst: {
            args: Prisma.GuildSettingsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuildSettingsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload>
          }
          findMany: {
            args: Prisma.GuildSettingsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload>[]
          }
          create: {
            args: Prisma.GuildSettingsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload>
          }
          createMany: {
            args: Prisma.GuildSettingsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GuildSettingsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload>
          }
          update: {
            args: Prisma.GuildSettingsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload>
          }
          deleteMany: {
            args: Prisma.GuildSettingsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GuildSettingsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GuildSettingsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuildSettingsPayload>
          }
          aggregate: {
            args: Prisma.GuildSettingsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGuildSettings>
          }
          groupBy: {
            args: Prisma.GuildSettingsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GuildSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuildSettingsCountArgs<ExtArgs>,
            result: $Utils.Optional<GuildSettingsCountAggregateOutputType> | number
          }
        }
      }
      Giveaways: {
        payload: Prisma.$GiveawaysPayload<ExtArgs>
        fields: Prisma.GiveawaysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GiveawaysFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GiveawaysFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload>
          }
          findFirst: {
            args: Prisma.GiveawaysFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GiveawaysFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload>
          }
          findMany: {
            args: Prisma.GiveawaysFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload>[]
          }
          create: {
            args: Prisma.GiveawaysCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload>
          }
          createMany: {
            args: Prisma.GiveawaysCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GiveawaysDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload>
          }
          update: {
            args: Prisma.GiveawaysUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload>
          }
          deleteMany: {
            args: Prisma.GiveawaysDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GiveawaysUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GiveawaysUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GiveawaysPayload>
          }
          aggregate: {
            args: Prisma.GiveawaysAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGiveaways>
          }
          groupBy: {
            args: Prisma.GiveawaysGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GiveawaysGroupByOutputType>[]
          }
          count: {
            args: Prisma.GiveawaysCountArgs<ExtArgs>,
            result: $Utils.Optional<GiveawaysCountAggregateOutputType> | number
          }
        }
      }
      Antinuke: {
        payload: Prisma.$AntinukePayload<ExtArgs>
        fields: Prisma.AntinukeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AntinukeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AntinukeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload>
          }
          findFirst: {
            args: Prisma.AntinukeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AntinukeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload>
          }
          findMany: {
            args: Prisma.AntinukeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload>[]
          }
          create: {
            args: Prisma.AntinukeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload>
          }
          createMany: {
            args: Prisma.AntinukeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AntinukeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload>
          }
          update: {
            args: Prisma.AntinukeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload>
          }
          deleteMany: {
            args: Prisma.AntinukeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AntinukeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AntinukeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AntinukePayload>
          }
          aggregate: {
            args: Prisma.AntinukeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAntinuke>
          }
          groupBy: {
            args: Prisma.AntinukeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AntinukeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AntinukeCountArgs<ExtArgs>,
            result: $Utils.Optional<AntinukeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GuildsCountOutputType
   */

  export type GuildsCountOutputType = {
    afks: number
    settings: number
    giveaways: number
  }

  export type GuildsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    afks?: boolean | GuildsCountOutputTypeCountAfksArgs
    settings?: boolean | GuildsCountOutputTypeCountSettingsArgs
    giveaways?: boolean | GuildsCountOutputTypeCountGiveawaysArgs
  }

  // Custom InputTypes

  /**
   * GuildsCountOutputType without action
   */
  export type GuildsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildsCountOutputType
     */
    select?: GuildsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GuildsCountOutputType without action
   */
  export type GuildsCountOutputTypeCountAfksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AfksWhereInput
  }


  /**
   * GuildsCountOutputType without action
   */
  export type GuildsCountOutputTypeCountSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuildSettingsWhereInput
  }


  /**
   * GuildsCountOutputType without action
   */
  export type GuildsCountOutputTypeCountGiveawaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GiveawaysWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    blacklisted: boolean | null
    noPrefix: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    blacklisted: boolean | null
    noPrefix: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    blacklisted: number
    noPrefix: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    blacklisted?: true
    noPrefix?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    blacklisted?: true
    noPrefix?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    blacklisted?: true
    noPrefix?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    blacklisted: boolean
    noPrefix: boolean
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blacklisted?: boolean
    noPrefix?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blacklisted?: boolean
    noPrefix?: boolean
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      blacklisted: boolean
      noPrefix: boolean
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
    readonly blacklisted: FieldRef<"Users", 'Boolean'>
    readonly noPrefix: FieldRef<"Users", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
  }



  /**
   * Model Guilds
   */

  export type AggregateGuilds = {
    _count: GuildsCountAggregateOutputType | null
    _min: GuildsMinAggregateOutputType | null
    _max: GuildsMaxAggregateOutputType | null
  }

  export type GuildsMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    blacklisted: boolean | null
  }

  export type GuildsMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    blacklisted: boolean | null
  }

  export type GuildsCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    blacklisted: number
    _all: number
  }


  export type GuildsMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    blacklisted?: true
  }

  export type GuildsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    blacklisted?: true
  }

  export type GuildsCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    blacklisted?: true
    _all?: true
  }

  export type GuildsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guilds to aggregate.
     */
    where?: GuildsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     */
    orderBy?: GuildsOrderByWithRelationInput | GuildsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuildsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guilds
    **/
    _count?: true | GuildsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildsMaxAggregateInputType
  }

  export type GetGuildsAggregateType<T extends GuildsAggregateArgs> = {
        [P in keyof T & keyof AggregateGuilds]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuilds[P]>
      : GetScalarType<T[P], AggregateGuilds[P]>
  }




  export type GuildsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuildsWhereInput
    orderBy?: GuildsOrderByWithAggregationInput | GuildsOrderByWithAggregationInput[]
    by: GuildsScalarFieldEnum[] | GuildsScalarFieldEnum
    having?: GuildsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildsCountAggregateInputType | true
    _min?: GuildsMinAggregateInputType
    _max?: GuildsMaxAggregateInputType
  }

  export type GuildsGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    blacklisted: boolean
    _count: GuildsCountAggregateOutputType | null
    _min: GuildsMinAggregateOutputType | null
    _max: GuildsMaxAggregateOutputType | null
  }

  type GetGuildsGroupByPayload<T extends GuildsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuildsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuildsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuildsGroupByOutputType[P]>
            : GetScalarType<T[P], GuildsGroupByOutputType[P]>
        }
      >
    >


  export type GuildsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blacklisted?: boolean
    afks?: boolean | Guilds$afksArgs<ExtArgs>
    settings?: boolean | Guilds$settingsArgs<ExtArgs>
    giveaways?: boolean | Guilds$giveawaysArgs<ExtArgs>
    antinukes?: boolean | Guilds$antinukesArgs<ExtArgs>
    _count?: boolean | GuildsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guilds"]>

  export type GuildsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    blacklisted?: boolean
  }

  export type GuildsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    afks?: boolean | Guilds$afksArgs<ExtArgs>
    settings?: boolean | Guilds$settingsArgs<ExtArgs>
    giveaways?: boolean | Guilds$giveawaysArgs<ExtArgs>
    antinukes?: boolean | Guilds$antinukesArgs<ExtArgs>
    _count?: boolean | GuildsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GuildsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Guilds"
    objects: {
      afks: Prisma.$AfksPayload<ExtArgs>[]
      settings: Prisma.$GuildSettingsPayload<ExtArgs>[]
      giveaways: Prisma.$GiveawaysPayload<ExtArgs>[]
      antinukes: Prisma.$AntinukePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      blacklisted: boolean
    }, ExtArgs["result"]["guilds"]>
    composites: {}
  }


  type GuildsGetPayload<S extends boolean | null | undefined | GuildsDefaultArgs> = $Result.GetResult<Prisma.$GuildsPayload, S>

  type GuildsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GuildsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GuildsCountAggregateInputType | true
    }

  export interface GuildsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guilds'], meta: { name: 'Guilds' } }
    /**
     * Find zero or one Guilds that matches the filter.
     * @param {GuildsFindUniqueArgs} args - Arguments to find a Guilds
     * @example
     * // Get one Guilds
     * const guilds = await prisma.guilds.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuildsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GuildsFindUniqueArgs<ExtArgs>>
    ): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Guilds that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GuildsFindUniqueOrThrowArgs} args - Arguments to find a Guilds
     * @example
     * // Get one Guilds
     * const guilds = await prisma.guilds.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GuildsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Guilds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildsFindFirstArgs} args - Arguments to find a Guilds
     * @example
     * // Get one Guilds
     * const guilds = await prisma.guilds.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuildsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildsFindFirstArgs<ExtArgs>>
    ): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Guilds that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildsFindFirstOrThrowArgs} args - Arguments to find a Guilds
     * @example
     * // Get one Guilds
     * const guilds = await prisma.guilds.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GuildsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Guilds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guilds
     * const guilds = await prisma.guilds.findMany()
     * 
     * // Get first 10 Guilds
     * const guilds = await prisma.guilds.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guildsWithIdOnly = await prisma.guilds.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GuildsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Guilds.
     * @param {GuildsCreateArgs} args - Arguments to create a Guilds.
     * @example
     * // Create one Guilds
     * const Guilds = await prisma.guilds.create({
     *   data: {
     *     // ... data to create a Guilds
     *   }
     * })
     * 
    **/
    create<T extends GuildsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GuildsCreateArgs<ExtArgs>>
    ): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Guilds.
     *     @param {GuildsCreateManyArgs} args - Arguments to create many Guilds.
     *     @example
     *     // Create many Guilds
     *     const guilds = await prisma.guilds.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuildsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Guilds.
     * @param {GuildsDeleteArgs} args - Arguments to delete one Guilds.
     * @example
     * // Delete one Guilds
     * const Guilds = await prisma.guilds.delete({
     *   where: {
     *     // ... filter to delete one Guilds
     *   }
     * })
     * 
    **/
    delete<T extends GuildsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GuildsDeleteArgs<ExtArgs>>
    ): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Guilds.
     * @param {GuildsUpdateArgs} args - Arguments to update one Guilds.
     * @example
     * // Update one Guilds
     * const guilds = await prisma.guilds.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuildsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GuildsUpdateArgs<ExtArgs>>
    ): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Guilds.
     * @param {GuildsDeleteManyArgs} args - Arguments to filter Guilds to delete.
     * @example
     * // Delete a few Guilds
     * const { count } = await prisma.guilds.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuildsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guilds
     * const guilds = await prisma.guilds.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuildsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GuildsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Guilds.
     * @param {GuildsUpsertArgs} args - Arguments to update or create a Guilds.
     * @example
     * // Update or create a Guilds
     * const guilds = await prisma.guilds.upsert({
     *   create: {
     *     // ... data to create a Guilds
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guilds we want to update
     *   }
     * })
    **/
    upsert<T extends GuildsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GuildsUpsertArgs<ExtArgs>>
    ): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildsCountArgs} args - Arguments to filter Guilds to count.
     * @example
     * // Count the number of Guilds
     * const count = await prisma.guilds.count({
     *   where: {
     *     // ... the filter for the Guilds we want to count
     *   }
     * })
    **/
    count<T extends GuildsCountArgs>(
      args?: Subset<T, GuildsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildsAggregateArgs>(args: Subset<T, GuildsAggregateArgs>): Prisma.PrismaPromise<GetGuildsAggregateType<T>>

    /**
     * Group by Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildsGroupByArgs['orderBy'] }
        : { orderBy?: GuildsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Guilds model
   */
  readonly fields: GuildsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guilds.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuildsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    afks<T extends Guilds$afksArgs<ExtArgs> = {}>(args?: Subset<T, Guilds$afksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'findMany'> | Null>;

    settings<T extends Guilds$settingsArgs<ExtArgs> = {}>(args?: Subset<T, Guilds$settingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'findMany'> | Null>;

    giveaways<T extends Guilds$giveawaysArgs<ExtArgs> = {}>(args?: Subset<T, Guilds$giveawaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'findMany'> | Null>;

    antinukes<T extends Guilds$antinukesArgs<ExtArgs> = {}>(args?: Subset<T, Guilds$antinukesArgs<ExtArgs>>): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Guilds model
   */ 
  interface GuildsFieldRefs {
    readonly id: FieldRef<"Guilds", 'String'>
    readonly createdAt: FieldRef<"Guilds", 'DateTime'>
    readonly updatedAt: FieldRef<"Guilds", 'DateTime'>
    readonly blacklisted: FieldRef<"Guilds", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Guilds findUnique
   */
  export type GuildsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * Filter, which Guilds to fetch.
     */
    where: GuildsWhereUniqueInput
  }


  /**
   * Guilds findUniqueOrThrow
   */
  export type GuildsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * Filter, which Guilds to fetch.
     */
    where: GuildsWhereUniqueInput
  }


  /**
   * Guilds findFirst
   */
  export type GuildsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * Filter, which Guilds to fetch.
     */
    where?: GuildsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     */
    orderBy?: GuildsOrderByWithRelationInput | GuildsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guilds.
     */
    cursor?: GuildsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guilds.
     */
    distinct?: GuildsScalarFieldEnum | GuildsScalarFieldEnum[]
  }


  /**
   * Guilds findFirstOrThrow
   */
  export type GuildsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * Filter, which Guilds to fetch.
     */
    where?: GuildsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     */
    orderBy?: GuildsOrderByWithRelationInput | GuildsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guilds.
     */
    cursor?: GuildsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guilds.
     */
    distinct?: GuildsScalarFieldEnum | GuildsScalarFieldEnum[]
  }


  /**
   * Guilds findMany
   */
  export type GuildsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * Filter, which Guilds to fetch.
     */
    where?: GuildsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     */
    orderBy?: GuildsOrderByWithRelationInput | GuildsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guilds.
     */
    cursor?: GuildsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     */
    skip?: number
    distinct?: GuildsScalarFieldEnum | GuildsScalarFieldEnum[]
  }


  /**
   * Guilds create
   */
  export type GuildsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * The data needed to create a Guilds.
     */
    data: XOR<GuildsCreateInput, GuildsUncheckedCreateInput>
  }


  /**
   * Guilds createMany
   */
  export type GuildsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Guilds.
     */
    data: GuildsCreateManyInput | GuildsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Guilds update
   */
  export type GuildsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * The data needed to update a Guilds.
     */
    data: XOR<GuildsUpdateInput, GuildsUncheckedUpdateInput>
    /**
     * Choose, which Guilds to update.
     */
    where: GuildsWhereUniqueInput
  }


  /**
   * Guilds updateMany
   */
  export type GuildsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Guilds.
     */
    data: XOR<GuildsUpdateManyMutationInput, GuildsUncheckedUpdateManyInput>
    /**
     * Filter which Guilds to update
     */
    where?: GuildsWhereInput
  }


  /**
   * Guilds upsert
   */
  export type GuildsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * The filter to search for the Guilds to update in case it exists.
     */
    where: GuildsWhereUniqueInput
    /**
     * In case the Guilds found by the `where` argument doesn't exist, create a new Guilds with this data.
     */
    create: XOR<GuildsCreateInput, GuildsUncheckedCreateInput>
    /**
     * In case the Guilds was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuildsUpdateInput, GuildsUncheckedUpdateInput>
  }


  /**
   * Guilds delete
   */
  export type GuildsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    /**
     * Filter which Guilds to delete.
     */
    where: GuildsWhereUniqueInput
  }


  /**
   * Guilds deleteMany
   */
  export type GuildsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guilds to delete
     */
    where?: GuildsWhereInput
  }


  /**
   * Guilds.afks
   */
  export type Guilds$afksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    where?: AfksWhereInput
    orderBy?: AfksOrderByWithRelationInput | AfksOrderByWithRelationInput[]
    cursor?: AfksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AfksScalarFieldEnum | AfksScalarFieldEnum[]
  }


  /**
   * Guilds.settings
   */
  export type Guilds$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    where?: GuildSettingsWhereInput
    orderBy?: GuildSettingsOrderByWithRelationInput | GuildSettingsOrderByWithRelationInput[]
    cursor?: GuildSettingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuildSettingsScalarFieldEnum | GuildSettingsScalarFieldEnum[]
  }


  /**
   * Guilds.giveaways
   */
  export type Guilds$giveawaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    where?: GiveawaysWhereInput
    orderBy?: GiveawaysOrderByWithRelationInput | GiveawaysOrderByWithRelationInput[]
    cursor?: GiveawaysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GiveawaysScalarFieldEnum | GiveawaysScalarFieldEnum[]
  }


  /**
   * Guilds.antinukes
   */
  export type Guilds$antinukesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    where?: AntinukeWhereInput
  }


  /**
   * Guilds without action
   */
  export type GuildsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
  }



  /**
   * Model Afks
   */

  export type AggregateAfks = {
    _count: AfksCountAggregateOutputType | null
    _avg: AfksAvgAggregateOutputType | null
    _sum: AfksSumAggregateOutputType | null
    _min: AfksMinAggregateOutputType | null
    _max: AfksMaxAggregateOutputType | null
  }

  export type AfksAvgAggregateOutputType = {
    timestamp: number | null
  }

  export type AfksSumAggregateOutputType = {
    timestamp: bigint | null
  }

  export type AfksMinAggregateOutputType = {
    userId: string | null
    reason: string | null
    timestamp: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
    guildId: string | null
  }

  export type AfksMaxAggregateOutputType = {
    userId: string | null
    reason: string | null
    timestamp: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
    guildId: string | null
  }

  export type AfksCountAggregateOutputType = {
    userId: number
    reason: number
    timestamp: number
    createdAt: number
    updatedAt: number
    guildId: number
    _all: number
  }


  export type AfksAvgAggregateInputType = {
    timestamp?: true
  }

  export type AfksSumAggregateInputType = {
    timestamp?: true
  }

  export type AfksMinAggregateInputType = {
    userId?: true
    reason?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    guildId?: true
  }

  export type AfksMaxAggregateInputType = {
    userId?: true
    reason?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    guildId?: true
  }

  export type AfksCountAggregateInputType = {
    userId?: true
    reason?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    guildId?: true
    _all?: true
  }

  export type AfksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Afks to aggregate.
     */
    where?: AfksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Afks to fetch.
     */
    orderBy?: AfksOrderByWithRelationInput | AfksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AfksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Afks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Afks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Afks
    **/
    _count?: true | AfksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AfksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AfksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AfksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AfksMaxAggregateInputType
  }

  export type GetAfksAggregateType<T extends AfksAggregateArgs> = {
        [P in keyof T & keyof AggregateAfks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAfks[P]>
      : GetScalarType<T[P], AggregateAfks[P]>
  }




  export type AfksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AfksWhereInput
    orderBy?: AfksOrderByWithAggregationInput | AfksOrderByWithAggregationInput[]
    by: AfksScalarFieldEnum[] | AfksScalarFieldEnum
    having?: AfksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AfksCountAggregateInputType | true
    _avg?: AfksAvgAggregateInputType
    _sum?: AfksSumAggregateInputType
    _min?: AfksMinAggregateInputType
    _max?: AfksMaxAggregateInputType
  }

  export type AfksGroupByOutputType = {
    userId: string
    reason: string
    timestamp: bigint
    createdAt: Date
    updatedAt: Date
    guildId: string | null
    _count: AfksCountAggregateOutputType | null
    _avg: AfksAvgAggregateOutputType | null
    _sum: AfksSumAggregateOutputType | null
    _min: AfksMinAggregateOutputType | null
    _max: AfksMaxAggregateOutputType | null
  }

  type GetAfksGroupByPayload<T extends AfksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AfksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AfksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AfksGroupByOutputType[P]>
            : GetScalarType<T[P], AfksGroupByOutputType[P]>
        }
      >
    >


  export type AfksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    reason?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guildId?: boolean
    Guilds?: boolean | Afks$GuildsArgs<ExtArgs>
  }, ExtArgs["result"]["afks"]>

  export type AfksSelectScalar = {
    userId?: boolean
    reason?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guildId?: boolean
  }

  export type AfksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Guilds?: boolean | Afks$GuildsArgs<ExtArgs>
  }


  export type $AfksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Afks"
    objects: {
      Guilds: Prisma.$GuildsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      reason: string
      timestamp: bigint
      createdAt: Date
      updatedAt: Date
      guildId: string | null
    }, ExtArgs["result"]["afks"]>
    composites: {}
  }


  type AfksGetPayload<S extends boolean | null | undefined | AfksDefaultArgs> = $Result.GetResult<Prisma.$AfksPayload, S>

  type AfksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AfksFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AfksCountAggregateInputType | true
    }

  export interface AfksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Afks'], meta: { name: 'Afks' } }
    /**
     * Find zero or one Afks that matches the filter.
     * @param {AfksFindUniqueArgs} args - Arguments to find a Afks
     * @example
     * // Get one Afks
     * const afks = await prisma.afks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AfksFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AfksFindUniqueArgs<ExtArgs>>
    ): Prisma__AfksClient<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Afks that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AfksFindUniqueOrThrowArgs} args - Arguments to find a Afks
     * @example
     * // Get one Afks
     * const afks = await prisma.afks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AfksFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AfksFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AfksClient<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Afks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AfksFindFirstArgs} args - Arguments to find a Afks
     * @example
     * // Get one Afks
     * const afks = await prisma.afks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AfksFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AfksFindFirstArgs<ExtArgs>>
    ): Prisma__AfksClient<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Afks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AfksFindFirstOrThrowArgs} args - Arguments to find a Afks
     * @example
     * // Get one Afks
     * const afks = await prisma.afks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AfksFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AfksFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AfksClient<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Afks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AfksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Afks
     * const afks = await prisma.afks.findMany()
     * 
     * // Get first 10 Afks
     * const afks = await prisma.afks.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const afksWithUserIdOnly = await prisma.afks.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends AfksFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AfksFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Afks.
     * @param {AfksCreateArgs} args - Arguments to create a Afks.
     * @example
     * // Create one Afks
     * const Afks = await prisma.afks.create({
     *   data: {
     *     // ... data to create a Afks
     *   }
     * })
     * 
    **/
    create<T extends AfksCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AfksCreateArgs<ExtArgs>>
    ): Prisma__AfksClient<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Afks.
     *     @param {AfksCreateManyArgs} args - Arguments to create many Afks.
     *     @example
     *     // Create many Afks
     *     const afks = await prisma.afks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AfksCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AfksCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Afks.
     * @param {AfksDeleteArgs} args - Arguments to delete one Afks.
     * @example
     * // Delete one Afks
     * const Afks = await prisma.afks.delete({
     *   where: {
     *     // ... filter to delete one Afks
     *   }
     * })
     * 
    **/
    delete<T extends AfksDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AfksDeleteArgs<ExtArgs>>
    ): Prisma__AfksClient<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Afks.
     * @param {AfksUpdateArgs} args - Arguments to update one Afks.
     * @example
     * // Update one Afks
     * const afks = await prisma.afks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AfksUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AfksUpdateArgs<ExtArgs>>
    ): Prisma__AfksClient<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Afks.
     * @param {AfksDeleteManyArgs} args - Arguments to filter Afks to delete.
     * @example
     * // Delete a few Afks
     * const { count } = await prisma.afks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AfksDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AfksDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Afks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AfksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Afks
     * const afks = await prisma.afks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AfksUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AfksUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Afks.
     * @param {AfksUpsertArgs} args - Arguments to update or create a Afks.
     * @example
     * // Update or create a Afks
     * const afks = await prisma.afks.upsert({
     *   create: {
     *     // ... data to create a Afks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Afks we want to update
     *   }
     * })
    **/
    upsert<T extends AfksUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AfksUpsertArgs<ExtArgs>>
    ): Prisma__AfksClient<$Result.GetResult<Prisma.$AfksPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Afks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AfksCountArgs} args - Arguments to filter Afks to count.
     * @example
     * // Count the number of Afks
     * const count = await prisma.afks.count({
     *   where: {
     *     // ... the filter for the Afks we want to count
     *   }
     * })
    **/
    count<T extends AfksCountArgs>(
      args?: Subset<T, AfksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AfksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Afks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AfksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AfksAggregateArgs>(args: Subset<T, AfksAggregateArgs>): Prisma.PrismaPromise<GetAfksAggregateType<T>>

    /**
     * Group by Afks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AfksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AfksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AfksGroupByArgs['orderBy'] }
        : { orderBy?: AfksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AfksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAfksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Afks model
   */
  readonly fields: AfksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Afks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AfksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Guilds<T extends Afks$GuildsArgs<ExtArgs> = {}>(args?: Subset<T, Afks$GuildsArgs<ExtArgs>>): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Afks model
   */ 
  interface AfksFieldRefs {
    readonly userId: FieldRef<"Afks", 'String'>
    readonly reason: FieldRef<"Afks", 'String'>
    readonly timestamp: FieldRef<"Afks", 'BigInt'>
    readonly createdAt: FieldRef<"Afks", 'DateTime'>
    readonly updatedAt: FieldRef<"Afks", 'DateTime'>
    readonly guildId: FieldRef<"Afks", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Afks findUnique
   */
  export type AfksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * Filter, which Afks to fetch.
     */
    where: AfksWhereUniqueInput
  }


  /**
   * Afks findUniqueOrThrow
   */
  export type AfksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * Filter, which Afks to fetch.
     */
    where: AfksWhereUniqueInput
  }


  /**
   * Afks findFirst
   */
  export type AfksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * Filter, which Afks to fetch.
     */
    where?: AfksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Afks to fetch.
     */
    orderBy?: AfksOrderByWithRelationInput | AfksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Afks.
     */
    cursor?: AfksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Afks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Afks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Afks.
     */
    distinct?: AfksScalarFieldEnum | AfksScalarFieldEnum[]
  }


  /**
   * Afks findFirstOrThrow
   */
  export type AfksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * Filter, which Afks to fetch.
     */
    where?: AfksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Afks to fetch.
     */
    orderBy?: AfksOrderByWithRelationInput | AfksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Afks.
     */
    cursor?: AfksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Afks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Afks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Afks.
     */
    distinct?: AfksScalarFieldEnum | AfksScalarFieldEnum[]
  }


  /**
   * Afks findMany
   */
  export type AfksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * Filter, which Afks to fetch.
     */
    where?: AfksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Afks to fetch.
     */
    orderBy?: AfksOrderByWithRelationInput | AfksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Afks.
     */
    cursor?: AfksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Afks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Afks.
     */
    skip?: number
    distinct?: AfksScalarFieldEnum | AfksScalarFieldEnum[]
  }


  /**
   * Afks create
   */
  export type AfksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * The data needed to create a Afks.
     */
    data: XOR<AfksCreateInput, AfksUncheckedCreateInput>
  }


  /**
   * Afks createMany
   */
  export type AfksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Afks.
     */
    data: AfksCreateManyInput | AfksCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Afks update
   */
  export type AfksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * The data needed to update a Afks.
     */
    data: XOR<AfksUpdateInput, AfksUncheckedUpdateInput>
    /**
     * Choose, which Afks to update.
     */
    where: AfksWhereUniqueInput
  }


  /**
   * Afks updateMany
   */
  export type AfksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Afks.
     */
    data: XOR<AfksUpdateManyMutationInput, AfksUncheckedUpdateManyInput>
    /**
     * Filter which Afks to update
     */
    where?: AfksWhereInput
  }


  /**
   * Afks upsert
   */
  export type AfksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * The filter to search for the Afks to update in case it exists.
     */
    where: AfksWhereUniqueInput
    /**
     * In case the Afks found by the `where` argument doesn't exist, create a new Afks with this data.
     */
    create: XOR<AfksCreateInput, AfksUncheckedCreateInput>
    /**
     * In case the Afks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AfksUpdateInput, AfksUncheckedUpdateInput>
  }


  /**
   * Afks delete
   */
  export type AfksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
    /**
     * Filter which Afks to delete.
     */
    where: AfksWhereUniqueInput
  }


  /**
   * Afks deleteMany
   */
  export type AfksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Afks to delete
     */
    where?: AfksWhereInput
  }


  /**
   * Afks.Guilds
   */
  export type Afks$GuildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    where?: GuildsWhereInput
  }


  /**
   * Afks without action
   */
  export type AfksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Afks
     */
    select?: AfksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AfksInclude<ExtArgs> | null
  }



  /**
   * Model GuildSettings
   */

  export type AggregateGuildSettings = {
    _count: GuildSettingsCountAggregateOutputType | null
    _min: GuildSettingsMinAggregateOutputType | null
    _max: GuildSettingsMaxAggregateOutputType | null
  }

  export type GuildSettingsMinAggregateOutputType = {
    id: string | null
    prefix: string | null
    createdAt: Date | null
    updatedAt: Date | null
    guildId: string | null
  }

  export type GuildSettingsMaxAggregateOutputType = {
    id: string | null
    prefix: string | null
    createdAt: Date | null
    updatedAt: Date | null
    guildId: string | null
  }

  export type GuildSettingsCountAggregateOutputType = {
    id: number
    prefix: number
    roles: number
    stickyNicknames: number
    createdAt: number
    updatedAt: number
    guildId: number
    _all: number
  }


  export type GuildSettingsMinAggregateInputType = {
    id?: true
    prefix?: true
    createdAt?: true
    updatedAt?: true
    guildId?: true
  }

  export type GuildSettingsMaxAggregateInputType = {
    id?: true
    prefix?: true
    createdAt?: true
    updatedAt?: true
    guildId?: true
  }

  export type GuildSettingsCountAggregateInputType = {
    id?: true
    prefix?: true
    roles?: true
    stickyNicknames?: true
    createdAt?: true
    updatedAt?: true
    guildId?: true
    _all?: true
  }

  export type GuildSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GuildSettings to aggregate.
     */
    where?: GuildSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildSettings to fetch.
     */
    orderBy?: GuildSettingsOrderByWithRelationInput | GuildSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuildSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GuildSettings
    **/
    _count?: true | GuildSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildSettingsMaxAggregateInputType
  }

  export type GetGuildSettingsAggregateType<T extends GuildSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateGuildSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuildSettings[P]>
      : GetScalarType<T[P], AggregateGuildSettings[P]>
  }




  export type GuildSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuildSettingsWhereInput
    orderBy?: GuildSettingsOrderByWithAggregationInput | GuildSettingsOrderByWithAggregationInput[]
    by: GuildSettingsScalarFieldEnum[] | GuildSettingsScalarFieldEnum
    having?: GuildSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildSettingsCountAggregateInputType | true
    _min?: GuildSettingsMinAggregateInputType
    _max?: GuildSettingsMaxAggregateInputType
  }

  export type GuildSettingsGroupByOutputType = {
    id: string
    prefix: string | null
    roles: JsonValue | null
    stickyNicknames: JsonValue[]
    createdAt: Date
    updatedAt: Date
    guildId: string | null
    _count: GuildSettingsCountAggregateOutputType | null
    _min: GuildSettingsMinAggregateOutputType | null
    _max: GuildSettingsMaxAggregateOutputType | null
  }

  type GetGuildSettingsGroupByPayload<T extends GuildSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuildSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuildSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuildSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], GuildSettingsGroupByOutputType[P]>
        }
      >
    >


  export type GuildSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    prefix?: boolean
    roles?: boolean
    stickyNicknames?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guildId?: boolean
    Guilds?: boolean | GuildSettings$GuildsArgs<ExtArgs>
  }, ExtArgs["result"]["guildSettings"]>

  export type GuildSettingsSelectScalar = {
    id?: boolean
    prefix?: boolean
    roles?: boolean
    stickyNicknames?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guildId?: boolean
  }

  export type GuildSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Guilds?: boolean | GuildSettings$GuildsArgs<ExtArgs>
  }


  export type $GuildSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GuildSettings"
    objects: {
      Guilds: Prisma.$GuildsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      prefix: string | null
      roles: Prisma.JsonValue | null
      stickyNicknames: Prisma.JsonValue[]
      createdAt: Date
      updatedAt: Date
      guildId: string | null
    }, ExtArgs["result"]["guildSettings"]>
    composites: {}
  }


  type GuildSettingsGetPayload<S extends boolean | null | undefined | GuildSettingsDefaultArgs> = $Result.GetResult<Prisma.$GuildSettingsPayload, S>

  type GuildSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GuildSettingsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GuildSettingsCountAggregateInputType | true
    }

  export interface GuildSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GuildSettings'], meta: { name: 'GuildSettings' } }
    /**
     * Find zero or one GuildSettings that matches the filter.
     * @param {GuildSettingsFindUniqueArgs} args - Arguments to find a GuildSettings
     * @example
     * // Get one GuildSettings
     * const guildSettings = await prisma.guildSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuildSettingsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GuildSettingsFindUniqueArgs<ExtArgs>>
    ): Prisma__GuildSettingsClient<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GuildSettings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GuildSettingsFindUniqueOrThrowArgs} args - Arguments to find a GuildSettings
     * @example
     * // Get one GuildSettings
     * const guildSettings = await prisma.guildSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GuildSettingsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildSettingsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GuildSettingsClient<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GuildSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsFindFirstArgs} args - Arguments to find a GuildSettings
     * @example
     * // Get one GuildSettings
     * const guildSettings = await prisma.guildSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuildSettingsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildSettingsFindFirstArgs<ExtArgs>>
    ): Prisma__GuildSettingsClient<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GuildSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsFindFirstOrThrowArgs} args - Arguments to find a GuildSettings
     * @example
     * // Get one GuildSettings
     * const guildSettings = await prisma.guildSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GuildSettingsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildSettingsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GuildSettingsClient<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GuildSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GuildSettings
     * const guildSettings = await prisma.guildSettings.findMany()
     * 
     * // Get first 10 GuildSettings
     * const guildSettings = await prisma.guildSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guildSettingsWithIdOnly = await prisma.guildSettings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GuildSettingsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildSettingsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GuildSettings.
     * @param {GuildSettingsCreateArgs} args - Arguments to create a GuildSettings.
     * @example
     * // Create one GuildSettings
     * const GuildSettings = await prisma.guildSettings.create({
     *   data: {
     *     // ... data to create a GuildSettings
     *   }
     * })
     * 
    **/
    create<T extends GuildSettingsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GuildSettingsCreateArgs<ExtArgs>>
    ): Prisma__GuildSettingsClient<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GuildSettings.
     *     @param {GuildSettingsCreateManyArgs} args - Arguments to create many GuildSettings.
     *     @example
     *     // Create many GuildSettings
     *     const guildSettings = await prisma.guildSettings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuildSettingsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildSettingsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GuildSettings.
     * @param {GuildSettingsDeleteArgs} args - Arguments to delete one GuildSettings.
     * @example
     * // Delete one GuildSettings
     * const GuildSettings = await prisma.guildSettings.delete({
     *   where: {
     *     // ... filter to delete one GuildSettings
     *   }
     * })
     * 
    **/
    delete<T extends GuildSettingsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GuildSettingsDeleteArgs<ExtArgs>>
    ): Prisma__GuildSettingsClient<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GuildSettings.
     * @param {GuildSettingsUpdateArgs} args - Arguments to update one GuildSettings.
     * @example
     * // Update one GuildSettings
     * const guildSettings = await prisma.guildSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuildSettingsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GuildSettingsUpdateArgs<ExtArgs>>
    ): Prisma__GuildSettingsClient<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GuildSettings.
     * @param {GuildSettingsDeleteManyArgs} args - Arguments to filter GuildSettings to delete.
     * @example
     * // Delete a few GuildSettings
     * const { count } = await prisma.guildSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuildSettingsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuildSettingsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuildSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GuildSettings
     * const guildSettings = await prisma.guildSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuildSettingsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GuildSettingsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GuildSettings.
     * @param {GuildSettingsUpsertArgs} args - Arguments to update or create a GuildSettings.
     * @example
     * // Update or create a GuildSettings
     * const guildSettings = await prisma.guildSettings.upsert({
     *   create: {
     *     // ... data to create a GuildSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GuildSettings we want to update
     *   }
     * })
    **/
    upsert<T extends GuildSettingsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GuildSettingsUpsertArgs<ExtArgs>>
    ): Prisma__GuildSettingsClient<$Result.GetResult<Prisma.$GuildSettingsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GuildSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsCountArgs} args - Arguments to filter GuildSettings to count.
     * @example
     * // Count the number of GuildSettings
     * const count = await prisma.guildSettings.count({
     *   where: {
     *     // ... the filter for the GuildSettings we want to count
     *   }
     * })
    **/
    count<T extends GuildSettingsCountArgs>(
      args?: Subset<T, GuildSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GuildSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildSettingsAggregateArgs>(args: Subset<T, GuildSettingsAggregateArgs>): Prisma.PrismaPromise<GetGuildSettingsAggregateType<T>>

    /**
     * Group by GuildSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildSettingsGroupByArgs['orderBy'] }
        : { orderBy?: GuildSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GuildSettings model
   */
  readonly fields: GuildSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GuildSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuildSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Guilds<T extends GuildSettings$GuildsArgs<ExtArgs> = {}>(args?: Subset<T, GuildSettings$GuildsArgs<ExtArgs>>): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GuildSettings model
   */ 
  interface GuildSettingsFieldRefs {
    readonly id: FieldRef<"GuildSettings", 'String'>
    readonly prefix: FieldRef<"GuildSettings", 'String'>
    readonly roles: FieldRef<"GuildSettings", 'Json'>
    readonly stickyNicknames: FieldRef<"GuildSettings", 'Json[]'>
    readonly createdAt: FieldRef<"GuildSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"GuildSettings", 'DateTime'>
    readonly guildId: FieldRef<"GuildSettings", 'String'>
  }
    

  // Custom InputTypes

  /**
   * GuildSettings findUnique
   */
  export type GuildSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * Filter, which GuildSettings to fetch.
     */
    where: GuildSettingsWhereUniqueInput
  }


  /**
   * GuildSettings findUniqueOrThrow
   */
  export type GuildSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * Filter, which GuildSettings to fetch.
     */
    where: GuildSettingsWhereUniqueInput
  }


  /**
   * GuildSettings findFirst
   */
  export type GuildSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * Filter, which GuildSettings to fetch.
     */
    where?: GuildSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildSettings to fetch.
     */
    orderBy?: GuildSettingsOrderByWithRelationInput | GuildSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuildSettings.
     */
    cursor?: GuildSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuildSettings.
     */
    distinct?: GuildSettingsScalarFieldEnum | GuildSettingsScalarFieldEnum[]
  }


  /**
   * GuildSettings findFirstOrThrow
   */
  export type GuildSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * Filter, which GuildSettings to fetch.
     */
    where?: GuildSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildSettings to fetch.
     */
    orderBy?: GuildSettingsOrderByWithRelationInput | GuildSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuildSettings.
     */
    cursor?: GuildSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuildSettings.
     */
    distinct?: GuildSettingsScalarFieldEnum | GuildSettingsScalarFieldEnum[]
  }


  /**
   * GuildSettings findMany
   */
  export type GuildSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * Filter, which GuildSettings to fetch.
     */
    where?: GuildSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildSettings to fetch.
     */
    orderBy?: GuildSettingsOrderByWithRelationInput | GuildSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GuildSettings.
     */
    cursor?: GuildSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildSettings.
     */
    skip?: number
    distinct?: GuildSettingsScalarFieldEnum | GuildSettingsScalarFieldEnum[]
  }


  /**
   * GuildSettings create
   */
  export type GuildSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a GuildSettings.
     */
    data: XOR<GuildSettingsCreateInput, GuildSettingsUncheckedCreateInput>
  }


  /**
   * GuildSettings createMany
   */
  export type GuildSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GuildSettings.
     */
    data: GuildSettingsCreateManyInput | GuildSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GuildSettings update
   */
  export type GuildSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a GuildSettings.
     */
    data: XOR<GuildSettingsUpdateInput, GuildSettingsUncheckedUpdateInput>
    /**
     * Choose, which GuildSettings to update.
     */
    where: GuildSettingsWhereUniqueInput
  }


  /**
   * GuildSettings updateMany
   */
  export type GuildSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GuildSettings.
     */
    data: XOR<GuildSettingsUpdateManyMutationInput, GuildSettingsUncheckedUpdateManyInput>
    /**
     * Filter which GuildSettings to update
     */
    where?: GuildSettingsWhereInput
  }


  /**
   * GuildSettings upsert
   */
  export type GuildSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the GuildSettings to update in case it exists.
     */
    where: GuildSettingsWhereUniqueInput
    /**
     * In case the GuildSettings found by the `where` argument doesn't exist, create a new GuildSettings with this data.
     */
    create: XOR<GuildSettingsCreateInput, GuildSettingsUncheckedCreateInput>
    /**
     * In case the GuildSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuildSettingsUpdateInput, GuildSettingsUncheckedUpdateInput>
  }


  /**
   * GuildSettings delete
   */
  export type GuildSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
    /**
     * Filter which GuildSettings to delete.
     */
    where: GuildSettingsWhereUniqueInput
  }


  /**
   * GuildSettings deleteMany
   */
  export type GuildSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GuildSettings to delete
     */
    where?: GuildSettingsWhereInput
  }


  /**
   * GuildSettings.Guilds
   */
  export type GuildSettings$GuildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    where?: GuildsWhereInput
  }


  /**
   * GuildSettings without action
   */
  export type GuildSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildSettings
     */
    select?: GuildSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildSettingsInclude<ExtArgs> | null
  }



  /**
   * Model Giveaways
   */

  export type AggregateGiveaways = {
    _count: GiveawaysCountAggregateOutputType | null
    _avg: GiveawaysAvgAggregateOutputType | null
    _sum: GiveawaysSumAggregateOutputType | null
    _min: GiveawaysMinAggregateOutputType | null
    _max: GiveawaysMaxAggregateOutputType | null
  }

  export type GiveawaysAvgAggregateOutputType = {
    endAt: number | null
    winners: number | null
  }

  export type GiveawaysSumAggregateOutputType = {
    endAt: bigint | null
    winners: number | null
  }

  export type GiveawaysMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    channelId: string | null
    guildId: string | null
    prize: string | null
    endAt: bigint | null
    winners: number | null
    active: boolean | null
    attachment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GiveawaysMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    channelId: string | null
    guildId: string | null
    prize: string | null
    endAt: bigint | null
    winners: number | null
    active: boolean | null
    attachment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GiveawaysCountAggregateOutputType = {
    id: number
    messageId: number
    channelId: number
    guildId: number
    prize: number
    endAt: number
    winners: number
    active: number
    attachment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GiveawaysAvgAggregateInputType = {
    endAt?: true
    winners?: true
  }

  export type GiveawaysSumAggregateInputType = {
    endAt?: true
    winners?: true
  }

  export type GiveawaysMinAggregateInputType = {
    id?: true
    messageId?: true
    channelId?: true
    guildId?: true
    prize?: true
    endAt?: true
    winners?: true
    active?: true
    attachment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GiveawaysMaxAggregateInputType = {
    id?: true
    messageId?: true
    channelId?: true
    guildId?: true
    prize?: true
    endAt?: true
    winners?: true
    active?: true
    attachment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GiveawaysCountAggregateInputType = {
    id?: true
    messageId?: true
    channelId?: true
    guildId?: true
    prize?: true
    endAt?: true
    winners?: true
    active?: true
    attachment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GiveawaysAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Giveaways to aggregate.
     */
    where?: GiveawaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Giveaways to fetch.
     */
    orderBy?: GiveawaysOrderByWithRelationInput | GiveawaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GiveawaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Giveaways from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Giveaways.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Giveaways
    **/
    _count?: true | GiveawaysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GiveawaysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GiveawaysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GiveawaysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GiveawaysMaxAggregateInputType
  }

  export type GetGiveawaysAggregateType<T extends GiveawaysAggregateArgs> = {
        [P in keyof T & keyof AggregateGiveaways]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGiveaways[P]>
      : GetScalarType<T[P], AggregateGiveaways[P]>
  }




  export type GiveawaysGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GiveawaysWhereInput
    orderBy?: GiveawaysOrderByWithAggregationInput | GiveawaysOrderByWithAggregationInput[]
    by: GiveawaysScalarFieldEnum[] | GiveawaysScalarFieldEnum
    having?: GiveawaysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GiveawaysCountAggregateInputType | true
    _avg?: GiveawaysAvgAggregateInputType
    _sum?: GiveawaysSumAggregateInputType
    _min?: GiveawaysMinAggregateInputType
    _max?: GiveawaysMaxAggregateInputType
  }

  export type GiveawaysGroupByOutputType = {
    id: string
    messageId: string
    channelId: string
    guildId: string | null
    prize: string
    endAt: bigint
    winners: number
    active: boolean
    attachment: string | null
    createdAt: Date
    updatedAt: Date
    _count: GiveawaysCountAggregateOutputType | null
    _avg: GiveawaysAvgAggregateOutputType | null
    _sum: GiveawaysSumAggregateOutputType | null
    _min: GiveawaysMinAggregateOutputType | null
    _max: GiveawaysMaxAggregateOutputType | null
  }

  type GetGiveawaysGroupByPayload<T extends GiveawaysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GiveawaysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GiveawaysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GiveawaysGroupByOutputType[P]>
            : GetScalarType<T[P], GiveawaysGroupByOutputType[P]>
        }
      >
    >


  export type GiveawaysSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    channelId?: boolean
    guildId?: boolean
    prize?: boolean
    endAt?: boolean
    winners?: boolean
    active?: boolean
    attachment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Guilds?: boolean | Giveaways$GuildsArgs<ExtArgs>
  }, ExtArgs["result"]["giveaways"]>

  export type GiveawaysSelectScalar = {
    id?: boolean
    messageId?: boolean
    channelId?: boolean
    guildId?: boolean
    prize?: boolean
    endAt?: boolean
    winners?: boolean
    active?: boolean
    attachment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GiveawaysInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Guilds?: boolean | Giveaways$GuildsArgs<ExtArgs>
  }


  export type $GiveawaysPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Giveaways"
    objects: {
      Guilds: Prisma.$GuildsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      channelId: string
      guildId: string | null
      prize: string
      endAt: bigint
      winners: number
      active: boolean
      attachment: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["giveaways"]>
    composites: {}
  }


  type GiveawaysGetPayload<S extends boolean | null | undefined | GiveawaysDefaultArgs> = $Result.GetResult<Prisma.$GiveawaysPayload, S>

  type GiveawaysCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GiveawaysFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GiveawaysCountAggregateInputType | true
    }

  export interface GiveawaysDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Giveaways'], meta: { name: 'Giveaways' } }
    /**
     * Find zero or one Giveaways that matches the filter.
     * @param {GiveawaysFindUniqueArgs} args - Arguments to find a Giveaways
     * @example
     * // Get one Giveaways
     * const giveaways = await prisma.giveaways.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GiveawaysFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GiveawaysFindUniqueArgs<ExtArgs>>
    ): Prisma__GiveawaysClient<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Giveaways that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GiveawaysFindUniqueOrThrowArgs} args - Arguments to find a Giveaways
     * @example
     * // Get one Giveaways
     * const giveaways = await prisma.giveaways.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GiveawaysFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GiveawaysFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GiveawaysClient<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Giveaways that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiveawaysFindFirstArgs} args - Arguments to find a Giveaways
     * @example
     * // Get one Giveaways
     * const giveaways = await prisma.giveaways.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GiveawaysFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GiveawaysFindFirstArgs<ExtArgs>>
    ): Prisma__GiveawaysClient<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Giveaways that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiveawaysFindFirstOrThrowArgs} args - Arguments to find a Giveaways
     * @example
     * // Get one Giveaways
     * const giveaways = await prisma.giveaways.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GiveawaysFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GiveawaysFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GiveawaysClient<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Giveaways that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiveawaysFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Giveaways
     * const giveaways = await prisma.giveaways.findMany()
     * 
     * // Get first 10 Giveaways
     * const giveaways = await prisma.giveaways.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const giveawaysWithIdOnly = await prisma.giveaways.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GiveawaysFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GiveawaysFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Giveaways.
     * @param {GiveawaysCreateArgs} args - Arguments to create a Giveaways.
     * @example
     * // Create one Giveaways
     * const Giveaways = await prisma.giveaways.create({
     *   data: {
     *     // ... data to create a Giveaways
     *   }
     * })
     * 
    **/
    create<T extends GiveawaysCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GiveawaysCreateArgs<ExtArgs>>
    ): Prisma__GiveawaysClient<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Giveaways.
     *     @param {GiveawaysCreateManyArgs} args - Arguments to create many Giveaways.
     *     @example
     *     // Create many Giveaways
     *     const giveaways = await prisma.giveaways.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GiveawaysCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GiveawaysCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Giveaways.
     * @param {GiveawaysDeleteArgs} args - Arguments to delete one Giveaways.
     * @example
     * // Delete one Giveaways
     * const Giveaways = await prisma.giveaways.delete({
     *   where: {
     *     // ... filter to delete one Giveaways
     *   }
     * })
     * 
    **/
    delete<T extends GiveawaysDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GiveawaysDeleteArgs<ExtArgs>>
    ): Prisma__GiveawaysClient<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Giveaways.
     * @param {GiveawaysUpdateArgs} args - Arguments to update one Giveaways.
     * @example
     * // Update one Giveaways
     * const giveaways = await prisma.giveaways.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GiveawaysUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GiveawaysUpdateArgs<ExtArgs>>
    ): Prisma__GiveawaysClient<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Giveaways.
     * @param {GiveawaysDeleteManyArgs} args - Arguments to filter Giveaways to delete.
     * @example
     * // Delete a few Giveaways
     * const { count } = await prisma.giveaways.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GiveawaysDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GiveawaysDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Giveaways.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiveawaysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Giveaways
     * const giveaways = await prisma.giveaways.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GiveawaysUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GiveawaysUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Giveaways.
     * @param {GiveawaysUpsertArgs} args - Arguments to update or create a Giveaways.
     * @example
     * // Update or create a Giveaways
     * const giveaways = await prisma.giveaways.upsert({
     *   create: {
     *     // ... data to create a Giveaways
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Giveaways we want to update
     *   }
     * })
    **/
    upsert<T extends GiveawaysUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GiveawaysUpsertArgs<ExtArgs>>
    ): Prisma__GiveawaysClient<$Result.GetResult<Prisma.$GiveawaysPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Giveaways.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiveawaysCountArgs} args - Arguments to filter Giveaways to count.
     * @example
     * // Count the number of Giveaways
     * const count = await prisma.giveaways.count({
     *   where: {
     *     // ... the filter for the Giveaways we want to count
     *   }
     * })
    **/
    count<T extends GiveawaysCountArgs>(
      args?: Subset<T, GiveawaysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GiveawaysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Giveaways.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiveawaysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GiveawaysAggregateArgs>(args: Subset<T, GiveawaysAggregateArgs>): Prisma.PrismaPromise<GetGiveawaysAggregateType<T>>

    /**
     * Group by Giveaways.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiveawaysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GiveawaysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GiveawaysGroupByArgs['orderBy'] }
        : { orderBy?: GiveawaysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GiveawaysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGiveawaysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Giveaways model
   */
  readonly fields: GiveawaysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Giveaways.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GiveawaysClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Guilds<T extends Giveaways$GuildsArgs<ExtArgs> = {}>(args?: Subset<T, Giveaways$GuildsArgs<ExtArgs>>): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Giveaways model
   */ 
  interface GiveawaysFieldRefs {
    readonly id: FieldRef<"Giveaways", 'String'>
    readonly messageId: FieldRef<"Giveaways", 'String'>
    readonly channelId: FieldRef<"Giveaways", 'String'>
    readonly guildId: FieldRef<"Giveaways", 'String'>
    readonly prize: FieldRef<"Giveaways", 'String'>
    readonly endAt: FieldRef<"Giveaways", 'BigInt'>
    readonly winners: FieldRef<"Giveaways", 'Int'>
    readonly active: FieldRef<"Giveaways", 'Boolean'>
    readonly attachment: FieldRef<"Giveaways", 'String'>
    readonly createdAt: FieldRef<"Giveaways", 'DateTime'>
    readonly updatedAt: FieldRef<"Giveaways", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Giveaways findUnique
   */
  export type GiveawaysFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * Filter, which Giveaways to fetch.
     */
    where: GiveawaysWhereUniqueInput
  }


  /**
   * Giveaways findUniqueOrThrow
   */
  export type GiveawaysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * Filter, which Giveaways to fetch.
     */
    where: GiveawaysWhereUniqueInput
  }


  /**
   * Giveaways findFirst
   */
  export type GiveawaysFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * Filter, which Giveaways to fetch.
     */
    where?: GiveawaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Giveaways to fetch.
     */
    orderBy?: GiveawaysOrderByWithRelationInput | GiveawaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Giveaways.
     */
    cursor?: GiveawaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Giveaways from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Giveaways.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Giveaways.
     */
    distinct?: GiveawaysScalarFieldEnum | GiveawaysScalarFieldEnum[]
  }


  /**
   * Giveaways findFirstOrThrow
   */
  export type GiveawaysFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * Filter, which Giveaways to fetch.
     */
    where?: GiveawaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Giveaways to fetch.
     */
    orderBy?: GiveawaysOrderByWithRelationInput | GiveawaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Giveaways.
     */
    cursor?: GiveawaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Giveaways from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Giveaways.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Giveaways.
     */
    distinct?: GiveawaysScalarFieldEnum | GiveawaysScalarFieldEnum[]
  }


  /**
   * Giveaways findMany
   */
  export type GiveawaysFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * Filter, which Giveaways to fetch.
     */
    where?: GiveawaysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Giveaways to fetch.
     */
    orderBy?: GiveawaysOrderByWithRelationInput | GiveawaysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Giveaways.
     */
    cursor?: GiveawaysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Giveaways from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Giveaways.
     */
    skip?: number
    distinct?: GiveawaysScalarFieldEnum | GiveawaysScalarFieldEnum[]
  }


  /**
   * Giveaways create
   */
  export type GiveawaysCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * The data needed to create a Giveaways.
     */
    data: XOR<GiveawaysCreateInput, GiveawaysUncheckedCreateInput>
  }


  /**
   * Giveaways createMany
   */
  export type GiveawaysCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Giveaways.
     */
    data: GiveawaysCreateManyInput | GiveawaysCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Giveaways update
   */
  export type GiveawaysUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * The data needed to update a Giveaways.
     */
    data: XOR<GiveawaysUpdateInput, GiveawaysUncheckedUpdateInput>
    /**
     * Choose, which Giveaways to update.
     */
    where: GiveawaysWhereUniqueInput
  }


  /**
   * Giveaways updateMany
   */
  export type GiveawaysUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Giveaways.
     */
    data: XOR<GiveawaysUpdateManyMutationInput, GiveawaysUncheckedUpdateManyInput>
    /**
     * Filter which Giveaways to update
     */
    where?: GiveawaysWhereInput
  }


  /**
   * Giveaways upsert
   */
  export type GiveawaysUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * The filter to search for the Giveaways to update in case it exists.
     */
    where: GiveawaysWhereUniqueInput
    /**
     * In case the Giveaways found by the `where` argument doesn't exist, create a new Giveaways with this data.
     */
    create: XOR<GiveawaysCreateInput, GiveawaysUncheckedCreateInput>
    /**
     * In case the Giveaways was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GiveawaysUpdateInput, GiveawaysUncheckedUpdateInput>
  }


  /**
   * Giveaways delete
   */
  export type GiveawaysDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
    /**
     * Filter which Giveaways to delete.
     */
    where: GiveawaysWhereUniqueInput
  }


  /**
   * Giveaways deleteMany
   */
  export type GiveawaysDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Giveaways to delete
     */
    where?: GiveawaysWhereInput
  }


  /**
   * Giveaways.Guilds
   */
  export type Giveaways$GuildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    where?: GuildsWhereInput
  }


  /**
   * Giveaways without action
   */
  export type GiveawaysDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Giveaways
     */
    select?: GiveawaysSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GiveawaysInclude<ExtArgs> | null
  }



  /**
   * Model Antinuke
   */

  export type AggregateAntinuke = {
    _count: AntinukeCountAggregateOutputType | null
    _min: AntinukeMinAggregateOutputType | null
    _max: AntinukeMaxAggregateOutputType | null
  }

  export type AntinukeMinAggregateOutputType = {
    id: string | null
    logChannel: string | null
    guildId: string | null
    punishment: $Enums.PunishmentType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AntinukeMaxAggregateOutputType = {
    id: string | null
    logChannel: string | null
    guildId: string | null
    punishment: $Enums.PunishmentType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AntinukeCountAggregateOutputType = {
    id: number
    logChannel: number
    guildId: number
    events: number
    whitelist: number
    punishment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AntinukeMinAggregateInputType = {
    id?: true
    logChannel?: true
    guildId?: true
    punishment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AntinukeMaxAggregateInputType = {
    id?: true
    logChannel?: true
    guildId?: true
    punishment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AntinukeCountAggregateInputType = {
    id?: true
    logChannel?: true
    guildId?: true
    events?: true
    whitelist?: true
    punishment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AntinukeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Antinuke to aggregate.
     */
    where?: AntinukeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Antinukes to fetch.
     */
    orderBy?: AntinukeOrderByWithRelationInput | AntinukeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AntinukeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Antinukes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Antinukes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Antinukes
    **/
    _count?: true | AntinukeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AntinukeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AntinukeMaxAggregateInputType
  }

  export type GetAntinukeAggregateType<T extends AntinukeAggregateArgs> = {
        [P in keyof T & keyof AggregateAntinuke]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAntinuke[P]>
      : GetScalarType<T[P], AggregateAntinuke[P]>
  }




  export type AntinukeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AntinukeWhereInput
    orderBy?: AntinukeOrderByWithAggregationInput | AntinukeOrderByWithAggregationInput[]
    by: AntinukeScalarFieldEnum[] | AntinukeScalarFieldEnum
    having?: AntinukeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AntinukeCountAggregateInputType | true
    _min?: AntinukeMinAggregateInputType
    _max?: AntinukeMaxAggregateInputType
  }

  export type AntinukeGroupByOutputType = {
    id: string
    logChannel: string | null
    guildId: string | null
    events: JsonValue[]
    whitelist: string[]
    punishment: $Enums.PunishmentType | null
    createdAt: Date
    updatedAt: Date
    _count: AntinukeCountAggregateOutputType | null
    _min: AntinukeMinAggregateOutputType | null
    _max: AntinukeMaxAggregateOutputType | null
  }

  type GetAntinukeGroupByPayload<T extends AntinukeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AntinukeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AntinukeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AntinukeGroupByOutputType[P]>
            : GetScalarType<T[P], AntinukeGroupByOutputType[P]>
        }
      >
    >


  export type AntinukeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    logChannel?: boolean
    guildId?: boolean
    events?: boolean
    whitelist?: boolean
    punishment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Guilds?: boolean | Antinuke$GuildsArgs<ExtArgs>
  }, ExtArgs["result"]["antinuke"]>

  export type AntinukeSelectScalar = {
    id?: boolean
    logChannel?: boolean
    guildId?: boolean
    events?: boolean
    whitelist?: boolean
    punishment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AntinukeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Guilds?: boolean | Antinuke$GuildsArgs<ExtArgs>
  }


  export type $AntinukePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Antinuke"
    objects: {
      Guilds: Prisma.$GuildsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      logChannel: string | null
      guildId: string | null
      events: Prisma.JsonValue[]
      whitelist: string[]
      punishment: $Enums.PunishmentType | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["antinuke"]>
    composites: {}
  }


  type AntinukeGetPayload<S extends boolean | null | undefined | AntinukeDefaultArgs> = $Result.GetResult<Prisma.$AntinukePayload, S>

  type AntinukeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AntinukeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AntinukeCountAggregateInputType | true
    }

  export interface AntinukeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Antinuke'], meta: { name: 'Antinuke' } }
    /**
     * Find zero or one Antinuke that matches the filter.
     * @param {AntinukeFindUniqueArgs} args - Arguments to find a Antinuke
     * @example
     * // Get one Antinuke
     * const antinuke = await prisma.antinuke.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AntinukeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AntinukeFindUniqueArgs<ExtArgs>>
    ): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Antinuke that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AntinukeFindUniqueOrThrowArgs} args - Arguments to find a Antinuke
     * @example
     * // Get one Antinuke
     * const antinuke = await prisma.antinuke.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AntinukeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AntinukeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Antinuke that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntinukeFindFirstArgs} args - Arguments to find a Antinuke
     * @example
     * // Get one Antinuke
     * const antinuke = await prisma.antinuke.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AntinukeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AntinukeFindFirstArgs<ExtArgs>>
    ): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Antinuke that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntinukeFindFirstOrThrowArgs} args - Arguments to find a Antinuke
     * @example
     * // Get one Antinuke
     * const antinuke = await prisma.antinuke.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AntinukeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AntinukeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Antinukes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntinukeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Antinukes
     * const antinukes = await prisma.antinuke.findMany()
     * 
     * // Get first 10 Antinukes
     * const antinukes = await prisma.antinuke.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const antinukeWithIdOnly = await prisma.antinuke.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AntinukeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AntinukeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Antinuke.
     * @param {AntinukeCreateArgs} args - Arguments to create a Antinuke.
     * @example
     * // Create one Antinuke
     * const Antinuke = await prisma.antinuke.create({
     *   data: {
     *     // ... data to create a Antinuke
     *   }
     * })
     * 
    **/
    create<T extends AntinukeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AntinukeCreateArgs<ExtArgs>>
    ): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Antinukes.
     *     @param {AntinukeCreateManyArgs} args - Arguments to create many Antinukes.
     *     @example
     *     // Create many Antinukes
     *     const antinuke = await prisma.antinuke.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AntinukeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AntinukeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Antinuke.
     * @param {AntinukeDeleteArgs} args - Arguments to delete one Antinuke.
     * @example
     * // Delete one Antinuke
     * const Antinuke = await prisma.antinuke.delete({
     *   where: {
     *     // ... filter to delete one Antinuke
     *   }
     * })
     * 
    **/
    delete<T extends AntinukeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AntinukeDeleteArgs<ExtArgs>>
    ): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Antinuke.
     * @param {AntinukeUpdateArgs} args - Arguments to update one Antinuke.
     * @example
     * // Update one Antinuke
     * const antinuke = await prisma.antinuke.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AntinukeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AntinukeUpdateArgs<ExtArgs>>
    ): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Antinukes.
     * @param {AntinukeDeleteManyArgs} args - Arguments to filter Antinukes to delete.
     * @example
     * // Delete a few Antinukes
     * const { count } = await prisma.antinuke.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AntinukeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AntinukeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Antinukes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntinukeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Antinukes
     * const antinuke = await prisma.antinuke.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AntinukeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AntinukeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Antinuke.
     * @param {AntinukeUpsertArgs} args - Arguments to update or create a Antinuke.
     * @example
     * // Update or create a Antinuke
     * const antinuke = await prisma.antinuke.upsert({
     *   create: {
     *     // ... data to create a Antinuke
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Antinuke we want to update
     *   }
     * })
    **/
    upsert<T extends AntinukeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AntinukeUpsertArgs<ExtArgs>>
    ): Prisma__AntinukeClient<$Result.GetResult<Prisma.$AntinukePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Antinukes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntinukeCountArgs} args - Arguments to filter Antinukes to count.
     * @example
     * // Count the number of Antinukes
     * const count = await prisma.antinuke.count({
     *   where: {
     *     // ... the filter for the Antinukes we want to count
     *   }
     * })
    **/
    count<T extends AntinukeCountArgs>(
      args?: Subset<T, AntinukeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AntinukeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Antinuke.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntinukeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AntinukeAggregateArgs>(args: Subset<T, AntinukeAggregateArgs>): Prisma.PrismaPromise<GetAntinukeAggregateType<T>>

    /**
     * Group by Antinuke.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntinukeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AntinukeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AntinukeGroupByArgs['orderBy'] }
        : { orderBy?: AntinukeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AntinukeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAntinukeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Antinuke model
   */
  readonly fields: AntinukeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Antinuke.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AntinukeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Guilds<T extends Antinuke$GuildsArgs<ExtArgs> = {}>(args?: Subset<T, Antinuke$GuildsArgs<ExtArgs>>): Prisma__GuildsClient<$Result.GetResult<Prisma.$GuildsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Antinuke model
   */ 
  interface AntinukeFieldRefs {
    readonly id: FieldRef<"Antinuke", 'String'>
    readonly logChannel: FieldRef<"Antinuke", 'String'>
    readonly guildId: FieldRef<"Antinuke", 'String'>
    readonly events: FieldRef<"Antinuke", 'Json[]'>
    readonly whitelist: FieldRef<"Antinuke", 'String[]'>
    readonly punishment: FieldRef<"Antinuke", 'PunishmentType'>
    readonly createdAt: FieldRef<"Antinuke", 'DateTime'>
    readonly updatedAt: FieldRef<"Antinuke", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Antinuke findUnique
   */
  export type AntinukeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * Filter, which Antinuke to fetch.
     */
    where: AntinukeWhereUniqueInput
  }


  /**
   * Antinuke findUniqueOrThrow
   */
  export type AntinukeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * Filter, which Antinuke to fetch.
     */
    where: AntinukeWhereUniqueInput
  }


  /**
   * Antinuke findFirst
   */
  export type AntinukeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * Filter, which Antinuke to fetch.
     */
    where?: AntinukeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Antinukes to fetch.
     */
    orderBy?: AntinukeOrderByWithRelationInput | AntinukeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Antinukes.
     */
    cursor?: AntinukeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Antinukes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Antinukes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Antinukes.
     */
    distinct?: AntinukeScalarFieldEnum | AntinukeScalarFieldEnum[]
  }


  /**
   * Antinuke findFirstOrThrow
   */
  export type AntinukeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * Filter, which Antinuke to fetch.
     */
    where?: AntinukeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Antinukes to fetch.
     */
    orderBy?: AntinukeOrderByWithRelationInput | AntinukeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Antinukes.
     */
    cursor?: AntinukeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Antinukes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Antinukes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Antinukes.
     */
    distinct?: AntinukeScalarFieldEnum | AntinukeScalarFieldEnum[]
  }


  /**
   * Antinuke findMany
   */
  export type AntinukeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * Filter, which Antinukes to fetch.
     */
    where?: AntinukeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Antinukes to fetch.
     */
    orderBy?: AntinukeOrderByWithRelationInput | AntinukeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Antinukes.
     */
    cursor?: AntinukeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Antinukes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Antinukes.
     */
    skip?: number
    distinct?: AntinukeScalarFieldEnum | AntinukeScalarFieldEnum[]
  }


  /**
   * Antinuke create
   */
  export type AntinukeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * The data needed to create a Antinuke.
     */
    data: XOR<AntinukeCreateInput, AntinukeUncheckedCreateInput>
  }


  /**
   * Antinuke createMany
   */
  export type AntinukeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Antinukes.
     */
    data: AntinukeCreateManyInput | AntinukeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Antinuke update
   */
  export type AntinukeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * The data needed to update a Antinuke.
     */
    data: XOR<AntinukeUpdateInput, AntinukeUncheckedUpdateInput>
    /**
     * Choose, which Antinuke to update.
     */
    where: AntinukeWhereUniqueInput
  }


  /**
   * Antinuke updateMany
   */
  export type AntinukeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Antinukes.
     */
    data: XOR<AntinukeUpdateManyMutationInput, AntinukeUncheckedUpdateManyInput>
    /**
     * Filter which Antinukes to update
     */
    where?: AntinukeWhereInput
  }


  /**
   * Antinuke upsert
   */
  export type AntinukeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * The filter to search for the Antinuke to update in case it exists.
     */
    where: AntinukeWhereUniqueInput
    /**
     * In case the Antinuke found by the `where` argument doesn't exist, create a new Antinuke with this data.
     */
    create: XOR<AntinukeCreateInput, AntinukeUncheckedCreateInput>
    /**
     * In case the Antinuke was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AntinukeUpdateInput, AntinukeUncheckedUpdateInput>
  }


  /**
   * Antinuke delete
   */
  export type AntinukeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
    /**
     * Filter which Antinuke to delete.
     */
    where: AntinukeWhereUniqueInput
  }


  /**
   * Antinuke deleteMany
   */
  export type AntinukeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Antinukes to delete
     */
    where?: AntinukeWhereInput
  }


  /**
   * Antinuke.Guilds
   */
  export type Antinuke$GuildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guilds
     */
    select?: GuildsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GuildsInclude<ExtArgs> | null
    where?: GuildsWhereInput
  }


  /**
   * Antinuke without action
   */
  export type AntinukeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Antinuke
     */
    select?: AntinukeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AntinukeInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    blacklisted: 'blacklisted',
    noPrefix: 'noPrefix'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const GuildsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    blacklisted: 'blacklisted'
  };

  export type GuildsScalarFieldEnum = (typeof GuildsScalarFieldEnum)[keyof typeof GuildsScalarFieldEnum]


  export const AfksScalarFieldEnum: {
    userId: 'userId',
    reason: 'reason',
    timestamp: 'timestamp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    guildId: 'guildId'
  };

  export type AfksScalarFieldEnum = (typeof AfksScalarFieldEnum)[keyof typeof AfksScalarFieldEnum]


  export const GuildSettingsScalarFieldEnum: {
    id: 'id',
    prefix: 'prefix',
    roles: 'roles',
    stickyNicknames: 'stickyNicknames',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    guildId: 'guildId'
  };

  export type GuildSettingsScalarFieldEnum = (typeof GuildSettingsScalarFieldEnum)[keyof typeof GuildSettingsScalarFieldEnum]


  export const GiveawaysScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    channelId: 'channelId',
    guildId: 'guildId',
    prize: 'prize',
    endAt: 'endAt',
    winners: 'winners',
    active: 'active',
    attachment: 'attachment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GiveawaysScalarFieldEnum = (typeof GiveawaysScalarFieldEnum)[keyof typeof GiveawaysScalarFieldEnum]


  export const AntinukeScalarFieldEnum: {
    id: 'id',
    logChannel: 'logChannel',
    guildId: 'guildId',
    events: 'events',
    whitelist: 'whitelist',
    punishment: 'punishment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AntinukeScalarFieldEnum = (typeof AntinukeScalarFieldEnum)[keyof typeof AntinukeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'PunishmentType'
   */
  export type EnumPunishmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PunishmentType'>
    


  /**
   * Reference to a field of type 'PunishmentType[]'
   */
  export type ListEnumPunishmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PunishmentType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    blacklisted?: BoolFilter<"Users"> | boolean
    noPrefix?: BoolFilter<"Users"> | boolean
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
    noPrefix?: SortOrder
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    blacklisted?: BoolFilter<"Users"> | boolean
    noPrefix?: BoolFilter<"Users"> | boolean
  }, "id" | "id">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
    noPrefix?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    blacklisted?: BoolWithAggregatesFilter<"Users"> | boolean
    noPrefix?: BoolWithAggregatesFilter<"Users"> | boolean
  }

  export type GuildsWhereInput = {
    AND?: GuildsWhereInput | GuildsWhereInput[]
    OR?: GuildsWhereInput[]
    NOT?: GuildsWhereInput | GuildsWhereInput[]
    id?: StringFilter<"Guilds"> | string
    createdAt?: DateTimeFilter<"Guilds"> | Date | string
    updatedAt?: DateTimeFilter<"Guilds"> | Date | string
    blacklisted?: BoolFilter<"Guilds"> | boolean
    afks?: AfksListRelationFilter
    settings?: GuildSettingsListRelationFilter
    giveaways?: GiveawaysListRelationFilter
    antinukes?: XOR<AntinukeNullableRelationFilter, AntinukeWhereInput> | null
  }

  export type GuildsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
    afks?: AfksOrderByRelationAggregateInput
    settings?: GuildSettingsOrderByRelationAggregateInput
    giveaways?: GiveawaysOrderByRelationAggregateInput
    antinukes?: AntinukeOrderByWithRelationInput
  }

  export type GuildsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GuildsWhereInput | GuildsWhereInput[]
    OR?: GuildsWhereInput[]
    NOT?: GuildsWhereInput | GuildsWhereInput[]
    createdAt?: DateTimeFilter<"Guilds"> | Date | string
    updatedAt?: DateTimeFilter<"Guilds"> | Date | string
    blacklisted?: BoolFilter<"Guilds"> | boolean
    afks?: AfksListRelationFilter
    settings?: GuildSettingsListRelationFilter
    giveaways?: GiveawaysListRelationFilter
    antinukes?: XOR<AntinukeNullableRelationFilter, AntinukeWhereInput> | null
  }, "id" | "id">

  export type GuildsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
    _count?: GuildsCountOrderByAggregateInput
    _max?: GuildsMaxOrderByAggregateInput
    _min?: GuildsMinOrderByAggregateInput
  }

  export type GuildsScalarWhereWithAggregatesInput = {
    AND?: GuildsScalarWhereWithAggregatesInput | GuildsScalarWhereWithAggregatesInput[]
    OR?: GuildsScalarWhereWithAggregatesInput[]
    NOT?: GuildsScalarWhereWithAggregatesInput | GuildsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Guilds"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Guilds"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Guilds"> | Date | string
    blacklisted?: BoolWithAggregatesFilter<"Guilds"> | boolean
  }

  export type AfksWhereInput = {
    AND?: AfksWhereInput | AfksWhereInput[]
    OR?: AfksWhereInput[]
    NOT?: AfksWhereInput | AfksWhereInput[]
    userId?: StringFilter<"Afks"> | string
    reason?: StringFilter<"Afks"> | string
    timestamp?: BigIntFilter<"Afks"> | bigint | number
    createdAt?: DateTimeFilter<"Afks"> | Date | string
    updatedAt?: DateTimeFilter<"Afks"> | Date | string
    guildId?: StringNullableFilter<"Afks"> | string | null
    Guilds?: XOR<GuildsNullableRelationFilter, GuildsWhereInput> | null
  }

  export type AfksOrderByWithRelationInput = {
    userId?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrderInput | SortOrder
    Guilds?: GuildsOrderByWithRelationInput
  }

  export type AfksWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    guildId?: string
    AND?: AfksWhereInput | AfksWhereInput[]
    OR?: AfksWhereInput[]
    NOT?: AfksWhereInput | AfksWhereInput[]
    reason?: StringFilter<"Afks"> | string
    timestamp?: BigIntFilter<"Afks"> | bigint | number
    createdAt?: DateTimeFilter<"Afks"> | Date | string
    updatedAt?: DateTimeFilter<"Afks"> | Date | string
    Guilds?: XOR<GuildsNullableRelationFilter, GuildsWhereInput> | null
  }, "userId" | "guildId">

  export type AfksOrderByWithAggregationInput = {
    userId?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrderInput | SortOrder
    _count?: AfksCountOrderByAggregateInput
    _avg?: AfksAvgOrderByAggregateInput
    _max?: AfksMaxOrderByAggregateInput
    _min?: AfksMinOrderByAggregateInput
    _sum?: AfksSumOrderByAggregateInput
  }

  export type AfksScalarWhereWithAggregatesInput = {
    AND?: AfksScalarWhereWithAggregatesInput | AfksScalarWhereWithAggregatesInput[]
    OR?: AfksScalarWhereWithAggregatesInput[]
    NOT?: AfksScalarWhereWithAggregatesInput | AfksScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Afks"> | string
    reason?: StringWithAggregatesFilter<"Afks"> | string
    timestamp?: BigIntWithAggregatesFilter<"Afks"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"Afks"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Afks"> | Date | string
    guildId?: StringNullableWithAggregatesFilter<"Afks"> | string | null
  }

  export type GuildSettingsWhereInput = {
    AND?: GuildSettingsWhereInput | GuildSettingsWhereInput[]
    OR?: GuildSettingsWhereInput[]
    NOT?: GuildSettingsWhereInput | GuildSettingsWhereInput[]
    id?: StringFilter<"GuildSettings"> | string
    prefix?: StringNullableFilter<"GuildSettings"> | string | null
    roles?: JsonNullableFilter<"GuildSettings">
    stickyNicknames?: JsonNullableListFilter<"GuildSettings">
    createdAt?: DateTimeFilter<"GuildSettings"> | Date | string
    updatedAt?: DateTimeFilter<"GuildSettings"> | Date | string
    guildId?: StringNullableFilter<"GuildSettings"> | string | null
    Guilds?: XOR<GuildsNullableRelationFilter, GuildsWhereInput> | null
  }

  export type GuildSettingsOrderByWithRelationInput = {
    id?: SortOrder
    prefix?: SortOrderInput | SortOrder
    roles?: SortOrderInput | SortOrder
    stickyNicknames?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrderInput | SortOrder
    Guilds?: GuildsOrderByWithRelationInput
  }

  export type GuildSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    guildId?: string
    AND?: GuildSettingsWhereInput | GuildSettingsWhereInput[]
    OR?: GuildSettingsWhereInput[]
    NOT?: GuildSettingsWhereInput | GuildSettingsWhereInput[]
    prefix?: StringNullableFilter<"GuildSettings"> | string | null
    roles?: JsonNullableFilter<"GuildSettings">
    stickyNicknames?: JsonNullableListFilter<"GuildSettings">
    createdAt?: DateTimeFilter<"GuildSettings"> | Date | string
    updatedAt?: DateTimeFilter<"GuildSettings"> | Date | string
    Guilds?: XOR<GuildsNullableRelationFilter, GuildsWhereInput> | null
  }, "id" | "guildId">

  export type GuildSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    prefix?: SortOrderInput | SortOrder
    roles?: SortOrderInput | SortOrder
    stickyNicknames?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrderInput | SortOrder
    _count?: GuildSettingsCountOrderByAggregateInput
    _max?: GuildSettingsMaxOrderByAggregateInput
    _min?: GuildSettingsMinOrderByAggregateInput
  }

  export type GuildSettingsScalarWhereWithAggregatesInput = {
    AND?: GuildSettingsScalarWhereWithAggregatesInput | GuildSettingsScalarWhereWithAggregatesInput[]
    OR?: GuildSettingsScalarWhereWithAggregatesInput[]
    NOT?: GuildSettingsScalarWhereWithAggregatesInput | GuildSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GuildSettings"> | string
    prefix?: StringNullableWithAggregatesFilter<"GuildSettings"> | string | null
    roles?: JsonNullableWithAggregatesFilter<"GuildSettings">
    stickyNicknames?: JsonNullableListFilter<"GuildSettings">
    createdAt?: DateTimeWithAggregatesFilter<"GuildSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GuildSettings"> | Date | string
    guildId?: StringNullableWithAggregatesFilter<"GuildSettings"> | string | null
  }

  export type GiveawaysWhereInput = {
    AND?: GiveawaysWhereInput | GiveawaysWhereInput[]
    OR?: GiveawaysWhereInput[]
    NOT?: GiveawaysWhereInput | GiveawaysWhereInput[]
    id?: StringFilter<"Giveaways"> | string
    messageId?: StringFilter<"Giveaways"> | string
    channelId?: StringFilter<"Giveaways"> | string
    guildId?: StringNullableFilter<"Giveaways"> | string | null
    prize?: StringFilter<"Giveaways"> | string
    endAt?: BigIntFilter<"Giveaways"> | bigint | number
    winners?: IntFilter<"Giveaways"> | number
    active?: BoolFilter<"Giveaways"> | boolean
    attachment?: StringNullableFilter<"Giveaways"> | string | null
    createdAt?: DateTimeFilter<"Giveaways"> | Date | string
    updatedAt?: DateTimeFilter<"Giveaways"> | Date | string
    Guilds?: XOR<GuildsNullableRelationFilter, GuildsWhereInput> | null
  }

  export type GiveawaysOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    channelId?: SortOrder
    guildId?: SortOrderInput | SortOrder
    prize?: SortOrder
    endAt?: SortOrder
    winners?: SortOrder
    active?: SortOrder
    attachment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Guilds?: GuildsOrderByWithRelationInput
  }

  export type GiveawaysWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    guildId_messageId?: GiveawaysGuildIdMessageIdCompoundUniqueInput
    AND?: GiveawaysWhereInput | GiveawaysWhereInput[]
    OR?: GiveawaysWhereInput[]
    NOT?: GiveawaysWhereInput | GiveawaysWhereInput[]
    messageId?: StringFilter<"Giveaways"> | string
    channelId?: StringFilter<"Giveaways"> | string
    guildId?: StringNullableFilter<"Giveaways"> | string | null
    prize?: StringFilter<"Giveaways"> | string
    endAt?: BigIntFilter<"Giveaways"> | bigint | number
    winners?: IntFilter<"Giveaways"> | number
    active?: BoolFilter<"Giveaways"> | boolean
    attachment?: StringNullableFilter<"Giveaways"> | string | null
    createdAt?: DateTimeFilter<"Giveaways"> | Date | string
    updatedAt?: DateTimeFilter<"Giveaways"> | Date | string
    Guilds?: XOR<GuildsNullableRelationFilter, GuildsWhereInput> | null
  }, "id" | "guildId_messageId">

  export type GiveawaysOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    channelId?: SortOrder
    guildId?: SortOrderInput | SortOrder
    prize?: SortOrder
    endAt?: SortOrder
    winners?: SortOrder
    active?: SortOrder
    attachment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GiveawaysCountOrderByAggregateInput
    _avg?: GiveawaysAvgOrderByAggregateInput
    _max?: GiveawaysMaxOrderByAggregateInput
    _min?: GiveawaysMinOrderByAggregateInput
    _sum?: GiveawaysSumOrderByAggregateInput
  }

  export type GiveawaysScalarWhereWithAggregatesInput = {
    AND?: GiveawaysScalarWhereWithAggregatesInput | GiveawaysScalarWhereWithAggregatesInput[]
    OR?: GiveawaysScalarWhereWithAggregatesInput[]
    NOT?: GiveawaysScalarWhereWithAggregatesInput | GiveawaysScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Giveaways"> | string
    messageId?: StringWithAggregatesFilter<"Giveaways"> | string
    channelId?: StringWithAggregatesFilter<"Giveaways"> | string
    guildId?: StringNullableWithAggregatesFilter<"Giveaways"> | string | null
    prize?: StringWithAggregatesFilter<"Giveaways"> | string
    endAt?: BigIntWithAggregatesFilter<"Giveaways"> | bigint | number
    winners?: IntWithAggregatesFilter<"Giveaways"> | number
    active?: BoolWithAggregatesFilter<"Giveaways"> | boolean
    attachment?: StringNullableWithAggregatesFilter<"Giveaways"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Giveaways"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Giveaways"> | Date | string
  }

  export type AntinukeWhereInput = {
    AND?: AntinukeWhereInput | AntinukeWhereInput[]
    OR?: AntinukeWhereInput[]
    NOT?: AntinukeWhereInput | AntinukeWhereInput[]
    id?: StringFilter<"Antinuke"> | string
    logChannel?: StringNullableFilter<"Antinuke"> | string | null
    guildId?: StringNullableFilter<"Antinuke"> | string | null
    events?: JsonNullableListFilter<"Antinuke">
    whitelist?: StringNullableListFilter<"Antinuke">
    punishment?: EnumPunishmentTypeNullableFilter<"Antinuke"> | $Enums.PunishmentType | null
    createdAt?: DateTimeFilter<"Antinuke"> | Date | string
    updatedAt?: DateTimeFilter<"Antinuke"> | Date | string
    Guilds?: XOR<GuildsNullableRelationFilter, GuildsWhereInput> | null
  }

  export type AntinukeOrderByWithRelationInput = {
    id?: SortOrder
    logChannel?: SortOrderInput | SortOrder
    guildId?: SortOrderInput | SortOrder
    events?: SortOrder
    whitelist?: SortOrder
    punishment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Guilds?: GuildsOrderByWithRelationInput
  }

  export type AntinukeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    guildId?: string
    AND?: AntinukeWhereInput | AntinukeWhereInput[]
    OR?: AntinukeWhereInput[]
    NOT?: AntinukeWhereInput | AntinukeWhereInput[]
    logChannel?: StringNullableFilter<"Antinuke"> | string | null
    events?: JsonNullableListFilter<"Antinuke">
    whitelist?: StringNullableListFilter<"Antinuke">
    punishment?: EnumPunishmentTypeNullableFilter<"Antinuke"> | $Enums.PunishmentType | null
    createdAt?: DateTimeFilter<"Antinuke"> | Date | string
    updatedAt?: DateTimeFilter<"Antinuke"> | Date | string
    Guilds?: XOR<GuildsNullableRelationFilter, GuildsWhereInput> | null
  }, "id" | "guildId">

  export type AntinukeOrderByWithAggregationInput = {
    id?: SortOrder
    logChannel?: SortOrderInput | SortOrder
    guildId?: SortOrderInput | SortOrder
    events?: SortOrder
    whitelist?: SortOrder
    punishment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AntinukeCountOrderByAggregateInput
    _max?: AntinukeMaxOrderByAggregateInput
    _min?: AntinukeMinOrderByAggregateInput
  }

  export type AntinukeScalarWhereWithAggregatesInput = {
    AND?: AntinukeScalarWhereWithAggregatesInput | AntinukeScalarWhereWithAggregatesInput[]
    OR?: AntinukeScalarWhereWithAggregatesInput[]
    NOT?: AntinukeScalarWhereWithAggregatesInput | AntinukeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Antinuke"> | string
    logChannel?: StringNullableWithAggregatesFilter<"Antinuke"> | string | null
    guildId?: StringNullableWithAggregatesFilter<"Antinuke"> | string | null
    events?: JsonNullableListFilter<"Antinuke">
    whitelist?: StringNullableListFilter<"Antinuke">
    punishment?: EnumPunishmentTypeNullableWithAggregatesFilter<"Antinuke"> | $Enums.PunishmentType | null
    createdAt?: DateTimeWithAggregatesFilter<"Antinuke"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Antinuke"> | Date | string
  }

  export type UsersCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    noPrefix?: boolean
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    noPrefix?: boolean
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    noPrefix?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    noPrefix?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    noPrefix?: boolean
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    noPrefix?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    noPrefix?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GuildsCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    afks?: AfksCreateNestedManyWithoutGuildsInput
    settings?: GuildSettingsCreateNestedManyWithoutGuildsInput
    giveaways?: GiveawaysCreateNestedManyWithoutGuildsInput
    antinukes?: AntinukeCreateNestedOneWithoutGuildsInput
  }

  export type GuildsUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    afks?: AfksUncheckedCreateNestedManyWithoutGuildsInput
    settings?: GuildSettingsUncheckedCreateNestedManyWithoutGuildsInput
    giveaways?: GiveawaysUncheckedCreateNestedManyWithoutGuildsInput
    antinukes?: AntinukeUncheckedCreateNestedOneWithoutGuildsInput
  }

  export type GuildsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    afks?: AfksUpdateManyWithoutGuildsNestedInput
    settings?: GuildSettingsUpdateManyWithoutGuildsNestedInput
    giveaways?: GiveawaysUpdateManyWithoutGuildsNestedInput
    antinukes?: AntinukeUpdateOneWithoutGuildsNestedInput
  }

  export type GuildsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    afks?: AfksUncheckedUpdateManyWithoutGuildsNestedInput
    settings?: GuildSettingsUncheckedUpdateManyWithoutGuildsNestedInput
    giveaways?: GiveawaysUncheckedUpdateManyWithoutGuildsNestedInput
    antinukes?: AntinukeUncheckedUpdateOneWithoutGuildsNestedInput
  }

  export type GuildsCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
  }

  export type GuildsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GuildsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AfksCreateInput = {
    userId?: string
    reason: string
    timestamp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    Guilds?: GuildsCreateNestedOneWithoutAfksInput
  }

  export type AfksUncheckedCreateInput = {
    userId?: string
    reason: string
    timestamp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    guildId?: string | null
  }

  export type AfksUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Guilds?: GuildsUpdateOneWithoutAfksNestedInput
  }

  export type AfksUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AfksCreateManyInput = {
    userId?: string
    reason: string
    timestamp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    guildId?: string | null
  }

  export type AfksUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AfksUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GuildSettingsCreateInput = {
    id?: string
    prefix?: string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsCreatestickyNicknamesInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    Guilds?: GuildsCreateNestedOneWithoutSettingsInput
  }

  export type GuildSettingsUncheckedCreateInput = {
    id?: string
    prefix?: string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsCreatestickyNicknamesInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    guildId?: string | null
  }

  export type GuildSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    prefix?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsUpdatestickyNicknamesInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Guilds?: GuildsUpdateOneWithoutSettingsNestedInput
  }

  export type GuildSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    prefix?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsUpdatestickyNicknamesInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GuildSettingsCreateManyInput = {
    id?: string
    prefix?: string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsCreatestickyNicknamesInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    guildId?: string | null
  }

  export type GuildSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    prefix?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsUpdatestickyNicknamesInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuildSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    prefix?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsUpdatestickyNicknamesInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GiveawaysCreateInput = {
    id?: string
    messageId: string
    channelId: string
    prize: string
    endAt: bigint | number
    winners: number
    active: boolean
    attachment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Guilds?: GuildsCreateNestedOneWithoutGiveawaysInput
  }

  export type GiveawaysUncheckedCreateInput = {
    id?: string
    messageId: string
    channelId: string
    guildId?: string | null
    prize: string
    endAt: bigint | number
    winners: number
    active: boolean
    attachment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GiveawaysUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    prize?: StringFieldUpdateOperationsInput | string
    endAt?: BigIntFieldUpdateOperationsInput | bigint | number
    winners?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Guilds?: GuildsUpdateOneWithoutGiveawaysNestedInput
  }

  export type GiveawaysUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
    prize?: StringFieldUpdateOperationsInput | string
    endAt?: BigIntFieldUpdateOperationsInput | bigint | number
    winners?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiveawaysCreateManyInput = {
    id?: string
    messageId: string
    channelId: string
    guildId?: string | null
    prize: string
    endAt: bigint | number
    winners: number
    active: boolean
    attachment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GiveawaysUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    prize?: StringFieldUpdateOperationsInput | string
    endAt?: BigIntFieldUpdateOperationsInput | bigint | number
    winners?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiveawaysUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
    prize?: StringFieldUpdateOperationsInput | string
    endAt?: BigIntFieldUpdateOperationsInput | bigint | number
    winners?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntinukeCreateInput = {
    id?: string
    logChannel?: string | null
    events?: AntinukeCreateeventsInput | InputJsonValue[]
    whitelist?: AntinukeCreatewhitelistInput | string[]
    punishment?: $Enums.PunishmentType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Guilds?: GuildsCreateNestedOneWithoutAntinukesInput
  }

  export type AntinukeUncheckedCreateInput = {
    id?: string
    logChannel?: string | null
    guildId?: string | null
    events?: AntinukeCreateeventsInput | InputJsonValue[]
    whitelist?: AntinukeCreatewhitelistInput | string[]
    punishment?: $Enums.PunishmentType | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntinukeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    events?: AntinukeUpdateeventsInput | InputJsonValue[]
    whitelist?: AntinukeUpdatewhitelistInput | string[]
    punishment?: NullableEnumPunishmentTypeFieldUpdateOperationsInput | $Enums.PunishmentType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Guilds?: GuildsUpdateOneWithoutAntinukesNestedInput
  }

  export type AntinukeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
    events?: AntinukeUpdateeventsInput | InputJsonValue[]
    whitelist?: AntinukeUpdatewhitelistInput | string[]
    punishment?: NullableEnumPunishmentTypeFieldUpdateOperationsInput | $Enums.PunishmentType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntinukeCreateManyInput = {
    id?: string
    logChannel?: string | null
    guildId?: string | null
    events?: AntinukeCreateeventsInput | InputJsonValue[]
    whitelist?: AntinukeCreatewhitelistInput | string[]
    punishment?: $Enums.PunishmentType | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntinukeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    events?: AntinukeUpdateeventsInput | InputJsonValue[]
    whitelist?: AntinukeUpdatewhitelistInput | string[]
    punishment?: NullableEnumPunishmentTypeFieldUpdateOperationsInput | $Enums.PunishmentType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntinukeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
    events?: AntinukeUpdateeventsInput | InputJsonValue[]
    whitelist?: AntinukeUpdatewhitelistInput | string[]
    punishment?: NullableEnumPunishmentTypeFieldUpdateOperationsInput | $Enums.PunishmentType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
    noPrefix?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
    noPrefix?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
    noPrefix?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AfksListRelationFilter = {
    every?: AfksWhereInput
    some?: AfksWhereInput
    none?: AfksWhereInput
  }

  export type GuildSettingsListRelationFilter = {
    every?: GuildSettingsWhereInput
    some?: GuildSettingsWhereInput
    none?: GuildSettingsWhereInput
  }

  export type GiveawaysListRelationFilter = {
    every?: GiveawaysWhereInput
    some?: GiveawaysWhereInput
    none?: GiveawaysWhereInput
  }

  export type AntinukeNullableRelationFilter = {
    is?: AntinukeWhereInput | null
    isNot?: AntinukeWhereInput | null
  }

  export type AfksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuildSettingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GiveawaysOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuildsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
  }

  export type GuildsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
  }

  export type GuildsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    blacklisted?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type GuildsNullableRelationFilter = {
    is?: GuildsWhereInput | null
    isNot?: GuildsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AfksCountOrderByAggregateInput = {
    userId?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrder
  }

  export type AfksAvgOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type AfksMaxOrderByAggregateInput = {
    userId?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrder
  }

  export type AfksMinOrderByAggregateInput = {
    userId?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrder
  }

  export type AfksSumOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableListFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type GuildSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    prefix?: SortOrder
    roles?: SortOrder
    stickyNicknames?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrder
  }

  export type GuildSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    prefix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrder
  }

  export type GuildSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    prefix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guildId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type GiveawaysGuildIdMessageIdCompoundUniqueInput = {
    guildId: string
    messageId: string
  }

  export type GiveawaysCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    channelId?: SortOrder
    guildId?: SortOrder
    prize?: SortOrder
    endAt?: SortOrder
    winners?: SortOrder
    active?: SortOrder
    attachment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GiveawaysAvgOrderByAggregateInput = {
    endAt?: SortOrder
    winners?: SortOrder
  }

  export type GiveawaysMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    channelId?: SortOrder
    guildId?: SortOrder
    prize?: SortOrder
    endAt?: SortOrder
    winners?: SortOrder
    active?: SortOrder
    attachment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GiveawaysMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    channelId?: SortOrder
    guildId?: SortOrder
    prize?: SortOrder
    endAt?: SortOrder
    winners?: SortOrder
    active?: SortOrder
    attachment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GiveawaysSumOrderByAggregateInput = {
    endAt?: SortOrder
    winners?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumPunishmentTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PunishmentType | EnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PunishmentType[] | ListEnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PunishmentType[] | ListEnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPunishmentTypeNullableFilter<$PrismaModel> | $Enums.PunishmentType | null
  }

  export type AntinukeCountOrderByAggregateInput = {
    id?: SortOrder
    logChannel?: SortOrder
    guildId?: SortOrder
    events?: SortOrder
    whitelist?: SortOrder
    punishment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AntinukeMaxOrderByAggregateInput = {
    id?: SortOrder
    logChannel?: SortOrder
    guildId?: SortOrder
    punishment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AntinukeMinOrderByAggregateInput = {
    id?: SortOrder
    logChannel?: SortOrder
    guildId?: SortOrder
    punishment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPunishmentTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PunishmentType | EnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PunishmentType[] | ListEnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PunishmentType[] | ListEnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPunishmentTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.PunishmentType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPunishmentTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumPunishmentTypeNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AfksCreateNestedManyWithoutGuildsInput = {
    create?: XOR<AfksCreateWithoutGuildsInput, AfksUncheckedCreateWithoutGuildsInput> | AfksCreateWithoutGuildsInput[] | AfksUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: AfksCreateOrConnectWithoutGuildsInput | AfksCreateOrConnectWithoutGuildsInput[]
    createMany?: AfksCreateManyGuildsInputEnvelope
    connect?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
  }

  export type GuildSettingsCreateNestedManyWithoutGuildsInput = {
    create?: XOR<GuildSettingsCreateWithoutGuildsInput, GuildSettingsUncheckedCreateWithoutGuildsInput> | GuildSettingsCreateWithoutGuildsInput[] | GuildSettingsUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: GuildSettingsCreateOrConnectWithoutGuildsInput | GuildSettingsCreateOrConnectWithoutGuildsInput[]
    createMany?: GuildSettingsCreateManyGuildsInputEnvelope
    connect?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
  }

  export type GiveawaysCreateNestedManyWithoutGuildsInput = {
    create?: XOR<GiveawaysCreateWithoutGuildsInput, GiveawaysUncheckedCreateWithoutGuildsInput> | GiveawaysCreateWithoutGuildsInput[] | GiveawaysUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: GiveawaysCreateOrConnectWithoutGuildsInput | GiveawaysCreateOrConnectWithoutGuildsInput[]
    createMany?: GiveawaysCreateManyGuildsInputEnvelope
    connect?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
  }

  export type AntinukeCreateNestedOneWithoutGuildsInput = {
    create?: XOR<AntinukeCreateWithoutGuildsInput, AntinukeUncheckedCreateWithoutGuildsInput>
    connectOrCreate?: AntinukeCreateOrConnectWithoutGuildsInput
    connect?: AntinukeWhereUniqueInput
  }

  export type AfksUncheckedCreateNestedManyWithoutGuildsInput = {
    create?: XOR<AfksCreateWithoutGuildsInput, AfksUncheckedCreateWithoutGuildsInput> | AfksCreateWithoutGuildsInput[] | AfksUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: AfksCreateOrConnectWithoutGuildsInput | AfksCreateOrConnectWithoutGuildsInput[]
    createMany?: AfksCreateManyGuildsInputEnvelope
    connect?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
  }

  export type GuildSettingsUncheckedCreateNestedManyWithoutGuildsInput = {
    create?: XOR<GuildSettingsCreateWithoutGuildsInput, GuildSettingsUncheckedCreateWithoutGuildsInput> | GuildSettingsCreateWithoutGuildsInput[] | GuildSettingsUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: GuildSettingsCreateOrConnectWithoutGuildsInput | GuildSettingsCreateOrConnectWithoutGuildsInput[]
    createMany?: GuildSettingsCreateManyGuildsInputEnvelope
    connect?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
  }

  export type GiveawaysUncheckedCreateNestedManyWithoutGuildsInput = {
    create?: XOR<GiveawaysCreateWithoutGuildsInput, GiveawaysUncheckedCreateWithoutGuildsInput> | GiveawaysCreateWithoutGuildsInput[] | GiveawaysUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: GiveawaysCreateOrConnectWithoutGuildsInput | GiveawaysCreateOrConnectWithoutGuildsInput[]
    createMany?: GiveawaysCreateManyGuildsInputEnvelope
    connect?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
  }

  export type AntinukeUncheckedCreateNestedOneWithoutGuildsInput = {
    create?: XOR<AntinukeCreateWithoutGuildsInput, AntinukeUncheckedCreateWithoutGuildsInput>
    connectOrCreate?: AntinukeCreateOrConnectWithoutGuildsInput
    connect?: AntinukeWhereUniqueInput
  }

  export type AfksUpdateManyWithoutGuildsNestedInput = {
    create?: XOR<AfksCreateWithoutGuildsInput, AfksUncheckedCreateWithoutGuildsInput> | AfksCreateWithoutGuildsInput[] | AfksUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: AfksCreateOrConnectWithoutGuildsInput | AfksCreateOrConnectWithoutGuildsInput[]
    upsert?: AfksUpsertWithWhereUniqueWithoutGuildsInput | AfksUpsertWithWhereUniqueWithoutGuildsInput[]
    createMany?: AfksCreateManyGuildsInputEnvelope
    set?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
    disconnect?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
    delete?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
    connect?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
    update?: AfksUpdateWithWhereUniqueWithoutGuildsInput | AfksUpdateWithWhereUniqueWithoutGuildsInput[]
    updateMany?: AfksUpdateManyWithWhereWithoutGuildsInput | AfksUpdateManyWithWhereWithoutGuildsInput[]
    deleteMany?: AfksScalarWhereInput | AfksScalarWhereInput[]
  }

  export type GuildSettingsUpdateManyWithoutGuildsNestedInput = {
    create?: XOR<GuildSettingsCreateWithoutGuildsInput, GuildSettingsUncheckedCreateWithoutGuildsInput> | GuildSettingsCreateWithoutGuildsInput[] | GuildSettingsUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: GuildSettingsCreateOrConnectWithoutGuildsInput | GuildSettingsCreateOrConnectWithoutGuildsInput[]
    upsert?: GuildSettingsUpsertWithWhereUniqueWithoutGuildsInput | GuildSettingsUpsertWithWhereUniqueWithoutGuildsInput[]
    createMany?: GuildSettingsCreateManyGuildsInputEnvelope
    set?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
    disconnect?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
    delete?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
    connect?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
    update?: GuildSettingsUpdateWithWhereUniqueWithoutGuildsInput | GuildSettingsUpdateWithWhereUniqueWithoutGuildsInput[]
    updateMany?: GuildSettingsUpdateManyWithWhereWithoutGuildsInput | GuildSettingsUpdateManyWithWhereWithoutGuildsInput[]
    deleteMany?: GuildSettingsScalarWhereInput | GuildSettingsScalarWhereInput[]
  }

  export type GiveawaysUpdateManyWithoutGuildsNestedInput = {
    create?: XOR<GiveawaysCreateWithoutGuildsInput, GiveawaysUncheckedCreateWithoutGuildsInput> | GiveawaysCreateWithoutGuildsInput[] | GiveawaysUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: GiveawaysCreateOrConnectWithoutGuildsInput | GiveawaysCreateOrConnectWithoutGuildsInput[]
    upsert?: GiveawaysUpsertWithWhereUniqueWithoutGuildsInput | GiveawaysUpsertWithWhereUniqueWithoutGuildsInput[]
    createMany?: GiveawaysCreateManyGuildsInputEnvelope
    set?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
    disconnect?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
    delete?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
    connect?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
    update?: GiveawaysUpdateWithWhereUniqueWithoutGuildsInput | GiveawaysUpdateWithWhereUniqueWithoutGuildsInput[]
    updateMany?: GiveawaysUpdateManyWithWhereWithoutGuildsInput | GiveawaysUpdateManyWithWhereWithoutGuildsInput[]
    deleteMany?: GiveawaysScalarWhereInput | GiveawaysScalarWhereInput[]
  }

  export type AntinukeUpdateOneWithoutGuildsNestedInput = {
    create?: XOR<AntinukeCreateWithoutGuildsInput, AntinukeUncheckedCreateWithoutGuildsInput>
    connectOrCreate?: AntinukeCreateOrConnectWithoutGuildsInput
    upsert?: AntinukeUpsertWithoutGuildsInput
    disconnect?: AntinukeWhereInput | boolean
    delete?: AntinukeWhereInput | boolean
    connect?: AntinukeWhereUniqueInput
    update?: XOR<XOR<AntinukeUpdateToOneWithWhereWithoutGuildsInput, AntinukeUpdateWithoutGuildsInput>, AntinukeUncheckedUpdateWithoutGuildsInput>
  }

  export type AfksUncheckedUpdateManyWithoutGuildsNestedInput = {
    create?: XOR<AfksCreateWithoutGuildsInput, AfksUncheckedCreateWithoutGuildsInput> | AfksCreateWithoutGuildsInput[] | AfksUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: AfksCreateOrConnectWithoutGuildsInput | AfksCreateOrConnectWithoutGuildsInput[]
    upsert?: AfksUpsertWithWhereUniqueWithoutGuildsInput | AfksUpsertWithWhereUniqueWithoutGuildsInput[]
    createMany?: AfksCreateManyGuildsInputEnvelope
    set?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
    disconnect?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
    delete?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
    connect?: AfksWhereUniqueInput | AfksWhereUniqueInput[]
    update?: AfksUpdateWithWhereUniqueWithoutGuildsInput | AfksUpdateWithWhereUniqueWithoutGuildsInput[]
    updateMany?: AfksUpdateManyWithWhereWithoutGuildsInput | AfksUpdateManyWithWhereWithoutGuildsInput[]
    deleteMany?: AfksScalarWhereInput | AfksScalarWhereInput[]
  }

  export type GuildSettingsUncheckedUpdateManyWithoutGuildsNestedInput = {
    create?: XOR<GuildSettingsCreateWithoutGuildsInput, GuildSettingsUncheckedCreateWithoutGuildsInput> | GuildSettingsCreateWithoutGuildsInput[] | GuildSettingsUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: GuildSettingsCreateOrConnectWithoutGuildsInput | GuildSettingsCreateOrConnectWithoutGuildsInput[]
    upsert?: GuildSettingsUpsertWithWhereUniqueWithoutGuildsInput | GuildSettingsUpsertWithWhereUniqueWithoutGuildsInput[]
    createMany?: GuildSettingsCreateManyGuildsInputEnvelope
    set?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
    disconnect?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
    delete?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
    connect?: GuildSettingsWhereUniqueInput | GuildSettingsWhereUniqueInput[]
    update?: GuildSettingsUpdateWithWhereUniqueWithoutGuildsInput | GuildSettingsUpdateWithWhereUniqueWithoutGuildsInput[]
    updateMany?: GuildSettingsUpdateManyWithWhereWithoutGuildsInput | GuildSettingsUpdateManyWithWhereWithoutGuildsInput[]
    deleteMany?: GuildSettingsScalarWhereInput | GuildSettingsScalarWhereInput[]
  }

  export type GiveawaysUncheckedUpdateManyWithoutGuildsNestedInput = {
    create?: XOR<GiveawaysCreateWithoutGuildsInput, GiveawaysUncheckedCreateWithoutGuildsInput> | GiveawaysCreateWithoutGuildsInput[] | GiveawaysUncheckedCreateWithoutGuildsInput[]
    connectOrCreate?: GiveawaysCreateOrConnectWithoutGuildsInput | GiveawaysCreateOrConnectWithoutGuildsInput[]
    upsert?: GiveawaysUpsertWithWhereUniqueWithoutGuildsInput | GiveawaysUpsertWithWhereUniqueWithoutGuildsInput[]
    createMany?: GiveawaysCreateManyGuildsInputEnvelope
    set?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
    disconnect?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
    delete?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
    connect?: GiveawaysWhereUniqueInput | GiveawaysWhereUniqueInput[]
    update?: GiveawaysUpdateWithWhereUniqueWithoutGuildsInput | GiveawaysUpdateWithWhereUniqueWithoutGuildsInput[]
    updateMany?: GiveawaysUpdateManyWithWhereWithoutGuildsInput | GiveawaysUpdateManyWithWhereWithoutGuildsInput[]
    deleteMany?: GiveawaysScalarWhereInput | GiveawaysScalarWhereInput[]
  }

  export type AntinukeUncheckedUpdateOneWithoutGuildsNestedInput = {
    create?: XOR<AntinukeCreateWithoutGuildsInput, AntinukeUncheckedCreateWithoutGuildsInput>
    connectOrCreate?: AntinukeCreateOrConnectWithoutGuildsInput
    upsert?: AntinukeUpsertWithoutGuildsInput
    disconnect?: AntinukeWhereInput | boolean
    delete?: AntinukeWhereInput | boolean
    connect?: AntinukeWhereUniqueInput
    update?: XOR<XOR<AntinukeUpdateToOneWithWhereWithoutGuildsInput, AntinukeUpdateWithoutGuildsInput>, AntinukeUncheckedUpdateWithoutGuildsInput>
  }

  export type GuildsCreateNestedOneWithoutAfksInput = {
    create?: XOR<GuildsCreateWithoutAfksInput, GuildsUncheckedCreateWithoutAfksInput>
    connectOrCreate?: GuildsCreateOrConnectWithoutAfksInput
    connect?: GuildsWhereUniqueInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type GuildsUpdateOneWithoutAfksNestedInput = {
    create?: XOR<GuildsCreateWithoutAfksInput, GuildsUncheckedCreateWithoutAfksInput>
    connectOrCreate?: GuildsCreateOrConnectWithoutAfksInput
    upsert?: GuildsUpsertWithoutAfksInput
    disconnect?: GuildsWhereInput | boolean
    delete?: GuildsWhereInput | boolean
    connect?: GuildsWhereUniqueInput
    update?: XOR<XOR<GuildsUpdateToOneWithWhereWithoutAfksInput, GuildsUpdateWithoutAfksInput>, GuildsUncheckedUpdateWithoutAfksInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GuildSettingsCreatestickyNicknamesInput = {
    set: InputJsonValue[]
  }

  export type GuildsCreateNestedOneWithoutSettingsInput = {
    create?: XOR<GuildsCreateWithoutSettingsInput, GuildsUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: GuildsCreateOrConnectWithoutSettingsInput
    connect?: GuildsWhereUniqueInput
  }

  export type GuildSettingsUpdatestickyNicknamesInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type GuildsUpdateOneWithoutSettingsNestedInput = {
    create?: XOR<GuildsCreateWithoutSettingsInput, GuildsUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: GuildsCreateOrConnectWithoutSettingsInput
    upsert?: GuildsUpsertWithoutSettingsInput
    disconnect?: GuildsWhereInput | boolean
    delete?: GuildsWhereInput | boolean
    connect?: GuildsWhereUniqueInput
    update?: XOR<XOR<GuildsUpdateToOneWithWhereWithoutSettingsInput, GuildsUpdateWithoutSettingsInput>, GuildsUncheckedUpdateWithoutSettingsInput>
  }

  export type GuildsCreateNestedOneWithoutGiveawaysInput = {
    create?: XOR<GuildsCreateWithoutGiveawaysInput, GuildsUncheckedCreateWithoutGiveawaysInput>
    connectOrCreate?: GuildsCreateOrConnectWithoutGiveawaysInput
    connect?: GuildsWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GuildsUpdateOneWithoutGiveawaysNestedInput = {
    create?: XOR<GuildsCreateWithoutGiveawaysInput, GuildsUncheckedCreateWithoutGiveawaysInput>
    connectOrCreate?: GuildsCreateOrConnectWithoutGiveawaysInput
    upsert?: GuildsUpsertWithoutGiveawaysInput
    disconnect?: GuildsWhereInput | boolean
    delete?: GuildsWhereInput | boolean
    connect?: GuildsWhereUniqueInput
    update?: XOR<XOR<GuildsUpdateToOneWithWhereWithoutGiveawaysInput, GuildsUpdateWithoutGiveawaysInput>, GuildsUncheckedUpdateWithoutGiveawaysInput>
  }

  export type AntinukeCreateeventsInput = {
    set: InputJsonValue[]
  }

  export type AntinukeCreatewhitelistInput = {
    set: string[]
  }

  export type GuildsCreateNestedOneWithoutAntinukesInput = {
    create?: XOR<GuildsCreateWithoutAntinukesInput, GuildsUncheckedCreateWithoutAntinukesInput>
    connectOrCreate?: GuildsCreateOrConnectWithoutAntinukesInput
    connect?: GuildsWhereUniqueInput
  }

  export type AntinukeUpdateeventsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type AntinukeUpdatewhitelistInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableEnumPunishmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PunishmentType | null
  }

  export type GuildsUpdateOneWithoutAntinukesNestedInput = {
    create?: XOR<GuildsCreateWithoutAntinukesInput, GuildsUncheckedCreateWithoutAntinukesInput>
    connectOrCreate?: GuildsCreateOrConnectWithoutAntinukesInput
    upsert?: GuildsUpsertWithoutAntinukesInput
    disconnect?: GuildsWhereInput | boolean
    delete?: GuildsWhereInput | boolean
    connect?: GuildsWhereUniqueInput
    update?: XOR<XOR<GuildsUpdateToOneWithWhereWithoutAntinukesInput, GuildsUpdateWithoutAntinukesInput>, GuildsUncheckedUpdateWithoutAntinukesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumPunishmentTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PunishmentType | EnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PunishmentType[] | ListEnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PunishmentType[] | ListEnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPunishmentTypeNullableFilter<$PrismaModel> | $Enums.PunishmentType | null
  }

  export type NestedEnumPunishmentTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PunishmentType | EnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PunishmentType[] | ListEnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PunishmentType[] | ListEnumPunishmentTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPunishmentTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.PunishmentType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPunishmentTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumPunishmentTypeNullableFilter<$PrismaModel>
  }

  export type AfksCreateWithoutGuildsInput = {
    userId?: string
    reason: string
    timestamp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AfksUncheckedCreateWithoutGuildsInput = {
    userId?: string
    reason: string
    timestamp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AfksCreateOrConnectWithoutGuildsInput = {
    where: AfksWhereUniqueInput
    create: XOR<AfksCreateWithoutGuildsInput, AfksUncheckedCreateWithoutGuildsInput>
  }

  export type AfksCreateManyGuildsInputEnvelope = {
    data: AfksCreateManyGuildsInput | AfksCreateManyGuildsInput[]
    skipDuplicates?: boolean
  }

  export type GuildSettingsCreateWithoutGuildsInput = {
    id?: string
    prefix?: string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsCreatestickyNicknamesInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuildSettingsUncheckedCreateWithoutGuildsInput = {
    id?: string
    prefix?: string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsCreatestickyNicknamesInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuildSettingsCreateOrConnectWithoutGuildsInput = {
    where: GuildSettingsWhereUniqueInput
    create: XOR<GuildSettingsCreateWithoutGuildsInput, GuildSettingsUncheckedCreateWithoutGuildsInput>
  }

  export type GuildSettingsCreateManyGuildsInputEnvelope = {
    data: GuildSettingsCreateManyGuildsInput | GuildSettingsCreateManyGuildsInput[]
    skipDuplicates?: boolean
  }

  export type GiveawaysCreateWithoutGuildsInput = {
    id?: string
    messageId: string
    channelId: string
    prize: string
    endAt: bigint | number
    winners: number
    active: boolean
    attachment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GiveawaysUncheckedCreateWithoutGuildsInput = {
    id?: string
    messageId: string
    channelId: string
    prize: string
    endAt: bigint | number
    winners: number
    active: boolean
    attachment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GiveawaysCreateOrConnectWithoutGuildsInput = {
    where: GiveawaysWhereUniqueInput
    create: XOR<GiveawaysCreateWithoutGuildsInput, GiveawaysUncheckedCreateWithoutGuildsInput>
  }

  export type GiveawaysCreateManyGuildsInputEnvelope = {
    data: GiveawaysCreateManyGuildsInput | GiveawaysCreateManyGuildsInput[]
    skipDuplicates?: boolean
  }

  export type AntinukeCreateWithoutGuildsInput = {
    id?: string
    logChannel?: string | null
    events?: AntinukeCreateeventsInput | InputJsonValue[]
    whitelist?: AntinukeCreatewhitelistInput | string[]
    punishment?: $Enums.PunishmentType | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntinukeUncheckedCreateWithoutGuildsInput = {
    id?: string
    logChannel?: string | null
    events?: AntinukeCreateeventsInput | InputJsonValue[]
    whitelist?: AntinukeCreatewhitelistInput | string[]
    punishment?: $Enums.PunishmentType | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntinukeCreateOrConnectWithoutGuildsInput = {
    where: AntinukeWhereUniqueInput
    create: XOR<AntinukeCreateWithoutGuildsInput, AntinukeUncheckedCreateWithoutGuildsInput>
  }

  export type AfksUpsertWithWhereUniqueWithoutGuildsInput = {
    where: AfksWhereUniqueInput
    update: XOR<AfksUpdateWithoutGuildsInput, AfksUncheckedUpdateWithoutGuildsInput>
    create: XOR<AfksCreateWithoutGuildsInput, AfksUncheckedCreateWithoutGuildsInput>
  }

  export type AfksUpdateWithWhereUniqueWithoutGuildsInput = {
    where: AfksWhereUniqueInput
    data: XOR<AfksUpdateWithoutGuildsInput, AfksUncheckedUpdateWithoutGuildsInput>
  }

  export type AfksUpdateManyWithWhereWithoutGuildsInput = {
    where: AfksScalarWhereInput
    data: XOR<AfksUpdateManyMutationInput, AfksUncheckedUpdateManyWithoutGuildsInput>
  }

  export type AfksScalarWhereInput = {
    AND?: AfksScalarWhereInput | AfksScalarWhereInput[]
    OR?: AfksScalarWhereInput[]
    NOT?: AfksScalarWhereInput | AfksScalarWhereInput[]
    userId?: StringFilter<"Afks"> | string
    reason?: StringFilter<"Afks"> | string
    timestamp?: BigIntFilter<"Afks"> | bigint | number
    createdAt?: DateTimeFilter<"Afks"> | Date | string
    updatedAt?: DateTimeFilter<"Afks"> | Date | string
    guildId?: StringNullableFilter<"Afks"> | string | null
  }

  export type GuildSettingsUpsertWithWhereUniqueWithoutGuildsInput = {
    where: GuildSettingsWhereUniqueInput
    update: XOR<GuildSettingsUpdateWithoutGuildsInput, GuildSettingsUncheckedUpdateWithoutGuildsInput>
    create: XOR<GuildSettingsCreateWithoutGuildsInput, GuildSettingsUncheckedCreateWithoutGuildsInput>
  }

  export type GuildSettingsUpdateWithWhereUniqueWithoutGuildsInput = {
    where: GuildSettingsWhereUniqueInput
    data: XOR<GuildSettingsUpdateWithoutGuildsInput, GuildSettingsUncheckedUpdateWithoutGuildsInput>
  }

  export type GuildSettingsUpdateManyWithWhereWithoutGuildsInput = {
    where: GuildSettingsScalarWhereInput
    data: XOR<GuildSettingsUpdateManyMutationInput, GuildSettingsUncheckedUpdateManyWithoutGuildsInput>
  }

  export type GuildSettingsScalarWhereInput = {
    AND?: GuildSettingsScalarWhereInput | GuildSettingsScalarWhereInput[]
    OR?: GuildSettingsScalarWhereInput[]
    NOT?: GuildSettingsScalarWhereInput | GuildSettingsScalarWhereInput[]
    id?: StringFilter<"GuildSettings"> | string
    prefix?: StringNullableFilter<"GuildSettings"> | string | null
    roles?: JsonNullableFilter<"GuildSettings">
    stickyNicknames?: JsonNullableListFilter<"GuildSettings">
    createdAt?: DateTimeFilter<"GuildSettings"> | Date | string
    updatedAt?: DateTimeFilter<"GuildSettings"> | Date | string
    guildId?: StringNullableFilter<"GuildSettings"> | string | null
  }

  export type GiveawaysUpsertWithWhereUniqueWithoutGuildsInput = {
    where: GiveawaysWhereUniqueInput
    update: XOR<GiveawaysUpdateWithoutGuildsInput, GiveawaysUncheckedUpdateWithoutGuildsInput>
    create: XOR<GiveawaysCreateWithoutGuildsInput, GiveawaysUncheckedCreateWithoutGuildsInput>
  }

  export type GiveawaysUpdateWithWhereUniqueWithoutGuildsInput = {
    where: GiveawaysWhereUniqueInput
    data: XOR<GiveawaysUpdateWithoutGuildsInput, GiveawaysUncheckedUpdateWithoutGuildsInput>
  }

  export type GiveawaysUpdateManyWithWhereWithoutGuildsInput = {
    where: GiveawaysScalarWhereInput
    data: XOR<GiveawaysUpdateManyMutationInput, GiveawaysUncheckedUpdateManyWithoutGuildsInput>
  }

  export type GiveawaysScalarWhereInput = {
    AND?: GiveawaysScalarWhereInput | GiveawaysScalarWhereInput[]
    OR?: GiveawaysScalarWhereInput[]
    NOT?: GiveawaysScalarWhereInput | GiveawaysScalarWhereInput[]
    id?: StringFilter<"Giveaways"> | string
    messageId?: StringFilter<"Giveaways"> | string
    channelId?: StringFilter<"Giveaways"> | string
    guildId?: StringNullableFilter<"Giveaways"> | string | null
    prize?: StringFilter<"Giveaways"> | string
    endAt?: BigIntFilter<"Giveaways"> | bigint | number
    winners?: IntFilter<"Giveaways"> | number
    active?: BoolFilter<"Giveaways"> | boolean
    attachment?: StringNullableFilter<"Giveaways"> | string | null
    createdAt?: DateTimeFilter<"Giveaways"> | Date | string
    updatedAt?: DateTimeFilter<"Giveaways"> | Date | string
  }

  export type AntinukeUpsertWithoutGuildsInput = {
    update: XOR<AntinukeUpdateWithoutGuildsInput, AntinukeUncheckedUpdateWithoutGuildsInput>
    create: XOR<AntinukeCreateWithoutGuildsInput, AntinukeUncheckedCreateWithoutGuildsInput>
    where?: AntinukeWhereInput
  }

  export type AntinukeUpdateToOneWithWhereWithoutGuildsInput = {
    where?: AntinukeWhereInput
    data: XOR<AntinukeUpdateWithoutGuildsInput, AntinukeUncheckedUpdateWithoutGuildsInput>
  }

  export type AntinukeUpdateWithoutGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    events?: AntinukeUpdateeventsInput | InputJsonValue[]
    whitelist?: AntinukeUpdatewhitelistInput | string[]
    punishment?: NullableEnumPunishmentTypeFieldUpdateOperationsInput | $Enums.PunishmentType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntinukeUncheckedUpdateWithoutGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    logChannel?: NullableStringFieldUpdateOperationsInput | string | null
    events?: AntinukeUpdateeventsInput | InputJsonValue[]
    whitelist?: AntinukeUpdatewhitelistInput | string[]
    punishment?: NullableEnumPunishmentTypeFieldUpdateOperationsInput | $Enums.PunishmentType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuildsCreateWithoutAfksInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    settings?: GuildSettingsCreateNestedManyWithoutGuildsInput
    giveaways?: GiveawaysCreateNestedManyWithoutGuildsInput
    antinukes?: AntinukeCreateNestedOneWithoutGuildsInput
  }

  export type GuildsUncheckedCreateWithoutAfksInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    settings?: GuildSettingsUncheckedCreateNestedManyWithoutGuildsInput
    giveaways?: GiveawaysUncheckedCreateNestedManyWithoutGuildsInput
    antinukes?: AntinukeUncheckedCreateNestedOneWithoutGuildsInput
  }

  export type GuildsCreateOrConnectWithoutAfksInput = {
    where: GuildsWhereUniqueInput
    create: XOR<GuildsCreateWithoutAfksInput, GuildsUncheckedCreateWithoutAfksInput>
  }

  export type GuildsUpsertWithoutAfksInput = {
    update: XOR<GuildsUpdateWithoutAfksInput, GuildsUncheckedUpdateWithoutAfksInput>
    create: XOR<GuildsCreateWithoutAfksInput, GuildsUncheckedCreateWithoutAfksInput>
    where?: GuildsWhereInput
  }

  export type GuildsUpdateToOneWithWhereWithoutAfksInput = {
    where?: GuildsWhereInput
    data: XOR<GuildsUpdateWithoutAfksInput, GuildsUncheckedUpdateWithoutAfksInput>
  }

  export type GuildsUpdateWithoutAfksInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    settings?: GuildSettingsUpdateManyWithoutGuildsNestedInput
    giveaways?: GiveawaysUpdateManyWithoutGuildsNestedInput
    antinukes?: AntinukeUpdateOneWithoutGuildsNestedInput
  }

  export type GuildsUncheckedUpdateWithoutAfksInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    settings?: GuildSettingsUncheckedUpdateManyWithoutGuildsNestedInput
    giveaways?: GiveawaysUncheckedUpdateManyWithoutGuildsNestedInput
    antinukes?: AntinukeUncheckedUpdateOneWithoutGuildsNestedInput
  }

  export type GuildsCreateWithoutSettingsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    afks?: AfksCreateNestedManyWithoutGuildsInput
    giveaways?: GiveawaysCreateNestedManyWithoutGuildsInput
    antinukes?: AntinukeCreateNestedOneWithoutGuildsInput
  }

  export type GuildsUncheckedCreateWithoutSettingsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    afks?: AfksUncheckedCreateNestedManyWithoutGuildsInput
    giveaways?: GiveawaysUncheckedCreateNestedManyWithoutGuildsInput
    antinukes?: AntinukeUncheckedCreateNestedOneWithoutGuildsInput
  }

  export type GuildsCreateOrConnectWithoutSettingsInput = {
    where: GuildsWhereUniqueInput
    create: XOR<GuildsCreateWithoutSettingsInput, GuildsUncheckedCreateWithoutSettingsInput>
  }

  export type GuildsUpsertWithoutSettingsInput = {
    update: XOR<GuildsUpdateWithoutSettingsInput, GuildsUncheckedUpdateWithoutSettingsInput>
    create: XOR<GuildsCreateWithoutSettingsInput, GuildsUncheckedCreateWithoutSettingsInput>
    where?: GuildsWhereInput
  }

  export type GuildsUpdateToOneWithWhereWithoutSettingsInput = {
    where?: GuildsWhereInput
    data: XOR<GuildsUpdateWithoutSettingsInput, GuildsUncheckedUpdateWithoutSettingsInput>
  }

  export type GuildsUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    afks?: AfksUpdateManyWithoutGuildsNestedInput
    giveaways?: GiveawaysUpdateManyWithoutGuildsNestedInput
    antinukes?: AntinukeUpdateOneWithoutGuildsNestedInput
  }

  export type GuildsUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    afks?: AfksUncheckedUpdateManyWithoutGuildsNestedInput
    giveaways?: GiveawaysUncheckedUpdateManyWithoutGuildsNestedInput
    antinukes?: AntinukeUncheckedUpdateOneWithoutGuildsNestedInput
  }

  export type GuildsCreateWithoutGiveawaysInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    afks?: AfksCreateNestedManyWithoutGuildsInput
    settings?: GuildSettingsCreateNestedManyWithoutGuildsInput
    antinukes?: AntinukeCreateNestedOneWithoutGuildsInput
  }

  export type GuildsUncheckedCreateWithoutGiveawaysInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    afks?: AfksUncheckedCreateNestedManyWithoutGuildsInput
    settings?: GuildSettingsUncheckedCreateNestedManyWithoutGuildsInput
    antinukes?: AntinukeUncheckedCreateNestedOneWithoutGuildsInput
  }

  export type GuildsCreateOrConnectWithoutGiveawaysInput = {
    where: GuildsWhereUniqueInput
    create: XOR<GuildsCreateWithoutGiveawaysInput, GuildsUncheckedCreateWithoutGiveawaysInput>
  }

  export type GuildsUpsertWithoutGiveawaysInput = {
    update: XOR<GuildsUpdateWithoutGiveawaysInput, GuildsUncheckedUpdateWithoutGiveawaysInput>
    create: XOR<GuildsCreateWithoutGiveawaysInput, GuildsUncheckedCreateWithoutGiveawaysInput>
    where?: GuildsWhereInput
  }

  export type GuildsUpdateToOneWithWhereWithoutGiveawaysInput = {
    where?: GuildsWhereInput
    data: XOR<GuildsUpdateWithoutGiveawaysInput, GuildsUncheckedUpdateWithoutGiveawaysInput>
  }

  export type GuildsUpdateWithoutGiveawaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    afks?: AfksUpdateManyWithoutGuildsNestedInput
    settings?: GuildSettingsUpdateManyWithoutGuildsNestedInput
    antinukes?: AntinukeUpdateOneWithoutGuildsNestedInput
  }

  export type GuildsUncheckedUpdateWithoutGiveawaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    afks?: AfksUncheckedUpdateManyWithoutGuildsNestedInput
    settings?: GuildSettingsUncheckedUpdateManyWithoutGuildsNestedInput
    antinukes?: AntinukeUncheckedUpdateOneWithoutGuildsNestedInput
  }

  export type GuildsCreateWithoutAntinukesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    afks?: AfksCreateNestedManyWithoutGuildsInput
    settings?: GuildSettingsCreateNestedManyWithoutGuildsInput
    giveaways?: GiveawaysCreateNestedManyWithoutGuildsInput
  }

  export type GuildsUncheckedCreateWithoutAntinukesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    blacklisted?: boolean
    afks?: AfksUncheckedCreateNestedManyWithoutGuildsInput
    settings?: GuildSettingsUncheckedCreateNestedManyWithoutGuildsInput
    giveaways?: GiveawaysUncheckedCreateNestedManyWithoutGuildsInput
  }

  export type GuildsCreateOrConnectWithoutAntinukesInput = {
    where: GuildsWhereUniqueInput
    create: XOR<GuildsCreateWithoutAntinukesInput, GuildsUncheckedCreateWithoutAntinukesInput>
  }

  export type GuildsUpsertWithoutAntinukesInput = {
    update: XOR<GuildsUpdateWithoutAntinukesInput, GuildsUncheckedUpdateWithoutAntinukesInput>
    create: XOR<GuildsCreateWithoutAntinukesInput, GuildsUncheckedCreateWithoutAntinukesInput>
    where?: GuildsWhereInput
  }

  export type GuildsUpdateToOneWithWhereWithoutAntinukesInput = {
    where?: GuildsWhereInput
    data: XOR<GuildsUpdateWithoutAntinukesInput, GuildsUncheckedUpdateWithoutAntinukesInput>
  }

  export type GuildsUpdateWithoutAntinukesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    afks?: AfksUpdateManyWithoutGuildsNestedInput
    settings?: GuildSettingsUpdateManyWithoutGuildsNestedInput
    giveaways?: GiveawaysUpdateManyWithoutGuildsNestedInput
  }

  export type GuildsUncheckedUpdateWithoutAntinukesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    afks?: AfksUncheckedUpdateManyWithoutGuildsNestedInput
    settings?: GuildSettingsUncheckedUpdateManyWithoutGuildsNestedInput
    giveaways?: GiveawaysUncheckedUpdateManyWithoutGuildsNestedInput
  }

  export type AfksCreateManyGuildsInput = {
    userId?: string
    reason: string
    timestamp: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuildSettingsCreateManyGuildsInput = {
    id?: string
    prefix?: string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsCreatestickyNicknamesInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GiveawaysCreateManyGuildsInput = {
    id?: string
    messageId: string
    channelId: string
    prize: string
    endAt: bigint | number
    winners: number
    active: boolean
    attachment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AfksUpdateWithoutGuildsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AfksUncheckedUpdateWithoutGuildsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AfksUncheckedUpdateManyWithoutGuildsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    timestamp?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuildSettingsUpdateWithoutGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    prefix?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsUpdatestickyNicknamesInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuildSettingsUncheckedUpdateWithoutGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    prefix?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsUpdatestickyNicknamesInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuildSettingsUncheckedUpdateManyWithoutGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    prefix?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: NullableJsonNullValueInput | InputJsonValue
    stickyNicknames?: GuildSettingsUpdatestickyNicknamesInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiveawaysUpdateWithoutGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    prize?: StringFieldUpdateOperationsInput | string
    endAt?: BigIntFieldUpdateOperationsInput | bigint | number
    winners?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiveawaysUncheckedUpdateWithoutGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    prize?: StringFieldUpdateOperationsInput | string
    endAt?: BigIntFieldUpdateOperationsInput | bigint | number
    winners?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiveawaysUncheckedUpdateManyWithoutGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    prize?: StringFieldUpdateOperationsInput | string
    endAt?: BigIntFieldUpdateOperationsInput | bigint | number
    winners?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GuildsCountOutputTypeDefaultArgs instead
     */
    export type GuildsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuildsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuildsDefaultArgs instead
     */
    export type GuildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuildsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AfksDefaultArgs instead
     */
    export type AfksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AfksDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuildSettingsDefaultArgs instead
     */
    export type GuildSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuildSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GiveawaysDefaultArgs instead
     */
    export type GiveawaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GiveawaysDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AntinukeDefaultArgs instead
     */
    export type AntinukeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AntinukeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}